grammar in.handyman.Dsl with org.eclipse.xtext.common.Terminals

generate dsl "http://www.handyman.in/Dsl"

Process:
	'process' name=STRING
	'{'
	try=Try
	catch=Catch
	finally=Finally
	'}';

Try:
	'try'
	'{'
	(action+=Action)*
	'}';

Finally:
	'finally'
	'{'
	(action+=Action)*
	'}';

Catch:
	'catch'
	'{'
	(action+=Action)*
	'}';

Action:
	(Copydata
	| LoadCsv
	| WriteCsv
	| Transform
	| Callprocess
	| Forkprocess
	| Fetch
	| Doozle
	| Dropfile
	| Abort
	| ExecJava
	| DeleteFolder
	| Terminal
	| SendEMail
	| Mongo2Db
	| FTP
	| Unzip
	| Zip
	| Checksum
	| JsonTransform
	| RestApi
	| Python
	| Rest
	| JsonDeserialize
	| ListFiles
	| DeleteSql
	| UpdateSql
	| InsertSql
	| TruncateSql
	| DropSql
	
	);

SendEMail:
	'sendemail' 'as' name=STRING 'db' source=STRING 'smtp-host' smtphost=STRING 'smtp-port' smtpport=STRING
	'from' from=STRING 'pass' pass=STRING 'to' to=STRING 'cc' cc=STRING
	'bcc' bcc=STRING 'subject' subject=STRING 'body' body=STRING 'signature' signature=STRING 'using'
	'{'
	value=SelectStatement
	'}' 'on-condition' condition=Expression;

DeleteFolder:
	'deletefolder' 'as' name=STRING 'folder' foldersource=STRING 'zipfile' zipsource=STRING
	'{'
	value=SelectStatement
	'}' 'on-condition' condition=Expression;

Terminal:
	'terminal' 'as' name=STRING 'id' id=STRING 'using'
	'{'
	value=STRING
	'}' 'on-condition' condition=Expression;

ExecJava:
	"java" 'as' name=STRING 'using' classFqn=STRING 'name-sake-db' dbSrc=STRING
	'{'
	value=STRING
	'}' 'on-condition' condition=Expression;

Abort:
	'abort' 'as' name=STRING
	'{'
	value=STRING
	'}' 'on-condition' condition=Expression;

Dropfile:
	'dropfile' 'as' name=STRING 'in-path' target=STRING 'on-condition' condition=Expression;

Doozle:
	'doozle' 'as' name=STRING 'in-table' target=STRING 'on' on=STRING 'using'
	'{'
	value=CreateStatement
	'}' 'on-condition' condition=Expression;

Fetch:
	'assign' 'as' name=STRING 'source' source=STRING 'using'
	'{'
	value=STRING
	'}' 'on-condition' condition=Expression;

Callprocess:
	'callprocess' 'as' name=STRING 'with-target' target=STRING 'from-file' source=STRING 'using' datasource=STRING
	'for-every'
	'{'
	value=SelectStatement
	'}' 'on-condition' condition=Expression;

Forkprocess:
	'forkprocess' 'as' name=STRING 'with-target' target=STRING 'from-file' source=STRING 'using' datasource=STRING
	'for-every'
	'{'
	value=SelectStatement
	'}' 'watermark' forkBatchSize=STRING 'on-condition' condition=Expression;

Copydata:
	'copydata' 'as' name=STRING 'from' source=STRING 'to' to=STRING 'target' target=STRING 'by-batch' limit=STRING 'using'
	'{'
	value=SelectStatement
	'}'  'on-condition' condition=Expression;

WriteCsv:
	'writecsv' 'as' name=STRING 'from' source=STRING 'to' to=STRING 'with' delim=STRING 'using'
	'{'
	value=SelectStatement
	'}' 'on-condition' condition=Expression;

LoadCsv:
	'loadcsv' 'as' name=STRING 'pid' pid=STRING 'from' source=STRING 'to' to=STRING 'with' delim=STRING 'by-batch'
	limit=STRING 'using'
	'{'
	value=SelectStatement
	'}' 'on-condition' condition=Expression;

Transform:
	'transform' 'as' name=STRING 'on' on=STRING 'using'
	'{'
	value+=NonSelectStatement
	'}' 'on-condition' condition=Expression;

DeleteSql:
	'deletesql' 'as' name=STRING 'on' on=STRING 'using'
	'{'
	value+=NonSelectStatement
	'}' 'on-condition' condition=Expression;
UpdateSql:
	'updatesql' 'as' name=STRING 'on' on=STRING 'using'
	'{'
	value+=NonSelectStatement
	'}' 'on-condition' condition=Expression;
InsertSql:
	'insertsql' 'as' name=STRING 'on' on=STRING 'using'
	'{'
	value+=NonSelectStatement
	'}' 'on-condition' condition=Expression;
TruncateSql:
	'truncatesql' 'as' name=STRING 'on' on=STRING 'using'
	'{'
	value+=NonSelectStatement
	'}' 'on-condition' condition=Expression;
DropSql:
	'dropsql' 'as' name=STRING 'on' on=STRING 'using'
	'{'
	value+=NonSelectStatement
	'}' 'on-condition' condition=Expression;

ListFiles:
	'listfiles' 'as' name=STRING 'from' source=STRING 'on' to=STRING 'target-table' targetTable=STRING 'using'
	'{'
	value=SelectStatement
	'}' 'on-condition' condition=Expression;

Mongo2Db:
	'mongo2db' 'as' name=STRING 'from' sourceConnStr=STRING 'to' to=STRING 'srcDb' sourceDb=STRING 'targetDb'
	targetDb=STRING 'targetTable' targetTable=STRING
	'by-filter' filter=STRING 'by-batch' limit=STRING 'find-attribute' findAttr=STRING 'apply-manipulation'
	applyManipulation=STRING
	'on-updatekey' onUpdateKey=STRING 'with-fetch-batch-size' fetchBatchSize=STRING 'with-write-batch-size'
	writeBatchSize=STRING
	'using'
	'{'
	value=SelectStatement
	'}' 'on-condition' condition=Expression;

FTP:
	'ftp' 'as' name=STRING 'host' host=STRING 'port' port=STRING 'username' username=STRING 'password' password=STRING
	'action' action=STRING 'local-dir' localDir=STRING 'local-file' localFile=STRING 'remote-dir' remoteDir=STRING
	'remote-file'
	remoteFile=STRING 'from' source=STRING 'target-table' targetTable=STRING 'using'
	'{'
	value=STRING
	'}' 'on-condition' condition=Expression;

Zip:
	'zip' 'as' name=STRING 'zip-file-path' zipFilePath=STRING 'zip-file-name' zipFileName=STRING 'source' source=STRING
	'buffer-size' bufferSize=STRING 'using'
	'{'
	value=SelectStatement
	'}' 'on-condition' condition=Expression;

Unzip:
	'unzip' 'as' name=STRING 'source' source=STRING 'dest-dir' destDir=STRING 'buffer-size' bufferSize=STRING 'using'
	'{'
	value=SelectStatement
	'}' 'on-condition' condition=Expression;

Checksum:
	'checksum' 'as' name=STRING 'host' host=STRING 'port' port=STRING 'username' username=STRING 'password'
	password=STRING
	'local-dir' localDir=STRING 'local-file' localFile=STRING 'remote-dir' remoteDir=STRING 'remote-file'
	remoteFile=STRING 'using'
	'{'
	value=SelectStatement
	'}' 'on-condition' condition=Expression;

JsonTransform:
	'jsontransform' 'as' name=STRING 'from' source=STRING 'target-table' targetTable=STRING 'using'
	'{'
	value=SelectStatement
	'}' 'on-condition' condition=Expression;
JsonDeserialize:
	'jsondeserialize' 'as' name=STRING 'from' source=STRING 'target-table' targetTable=STRING 'input' input=STRING 'using'
	'{'
	value=SelectStatement
	'}' 'on-condition' condition=Expression;
RestApi:
	'restapi' 'as' name=STRING 'url' url=STRING 'method' method=STRING 'property' property=STRING 'payload'
	payload=STRING
	'from' source=STRING 'target-table' targetTable=STRING 'using'
	'{'
	value=SelectStatement
	'}' 'on-condition' condition=Expression;

Python:
	'python' 'as' name=STRING 'from' source=STRING 'target' target=STRING 'using'
	'{'
	value=SelectStatement
	'}' 'on-condition' condition=Expression;

Rest:
	'rest' 'as' name=STRING 'secured-by' authtoken=STRING 'with-url' url=STRING 'and-method-as' method=STRING
	'{'
		'from' resourcedatafrom=STRING 'update-url-with' '{'
				urldata=SelectStatement
		'}'
		'from' headerdatafrom=STRING 'update-header-with' '{'
				headerdata=SelectStatement  
			'}'
		'from' postdatafrom=STRING 'update-body-with' '{'
				'parent' 'as' parentName=STRING parentdata=SelectStatement 
				parts+=(RestPart)*
		'}'
		'into' ackdatato=STRING 'store-ack-at' '{'
				ackdata=SelectStatement 
		'}'
	'}' 'on-condition' condition=Expression
;

RestPart:
	'part' 'as' partName=STRING 'with' partData=SelectStatement
; 


Column:
	STRING;

SelectStatement:
	STRING;

NonSelectStatement:
	STRING;

CreateStatement:
	STRING;

Expression:
	'if' lhs=STRING operator=Operator rhs=STRING;

Operator:
	'<' | '>' | '==' | 'contains';
