/*
 * generated by Xtext 2.16.0
 */
package in.handyman.serializer;

import com.google.inject.Inject;
import in.handyman.dsl.Abort;
import in.handyman.dsl.Callprocess;
import in.handyman.dsl.Catch;
import in.handyman.dsl.Checksum;
import in.handyman.dsl.Copydata;
import in.handyman.dsl.DeleteFolder;
import in.handyman.dsl.DeleteSql;
import in.handyman.dsl.Doozle;
import in.handyman.dsl.DropSql;
import in.handyman.dsl.Dropfile;
import in.handyman.dsl.DslPackage;
import in.handyman.dsl.ExecJava;
import in.handyman.dsl.Expression;
import in.handyman.dsl.FTP;
import in.handyman.dsl.Fetch;
import in.handyman.dsl.Finally;
import in.handyman.dsl.Forkprocess;
import in.handyman.dsl.InsertSql;
import in.handyman.dsl.JsonDeserialize;
import in.handyman.dsl.JsonTransform;
import in.handyman.dsl.ListFiles;
import in.handyman.dsl.LoadCsv;
import in.handyman.dsl.Mongo2Db;
import in.handyman.dsl.Python;
import in.handyman.dsl.Rest;
import in.handyman.dsl.RestApi;
import in.handyman.dsl.RestPart;
import in.handyman.dsl.SendEMail;
import in.handyman.dsl.Terminal;
import in.handyman.dsl.Transform;
import in.handyman.dsl.TruncateSql;
import in.handyman.dsl.Try;
import in.handyman.dsl.Unzip;
import in.handyman.dsl.UpdateSql;
import in.handyman.dsl.WriteCsv;
import in.handyman.dsl.Zip;
import in.handyman.services.DslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class DslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DslPackage.ABORT:
				sequence_Abort(context, (Abort) semanticObject); 
				return; 
			case DslPackage.CALLPROCESS:
				sequence_Callprocess(context, (Callprocess) semanticObject); 
				return; 
			case DslPackage.CATCH:
				sequence_Catch(context, (Catch) semanticObject); 
				return; 
			case DslPackage.CHECKSUM:
				sequence_Checksum(context, (Checksum) semanticObject); 
				return; 
			case DslPackage.COPYDATA:
				sequence_Copydata(context, (Copydata) semanticObject); 
				return; 
			case DslPackage.DELETE_FOLDER:
				sequence_DeleteFolder(context, (DeleteFolder) semanticObject); 
				return; 
			case DslPackage.DELETE_SQL:
				sequence_DeleteSql(context, (DeleteSql) semanticObject); 
				return; 
			case DslPackage.DOOZLE:
				sequence_Doozle(context, (Doozle) semanticObject); 
				return; 
			case DslPackage.DROP_SQL:
				sequence_DropSql(context, (DropSql) semanticObject); 
				return; 
			case DslPackage.DROPFILE:
				sequence_Dropfile(context, (Dropfile) semanticObject); 
				return; 
			case DslPackage.EXEC_JAVA:
				sequence_ExecJava(context, (ExecJava) semanticObject); 
				return; 
			case DslPackage.EXPRESSION:
				sequence_Expression(context, (Expression) semanticObject); 
				return; 
			case DslPackage.FTP:
				sequence_FTP(context, (FTP) semanticObject); 
				return; 
			case DslPackage.FETCH:
				sequence_Fetch(context, (Fetch) semanticObject); 
				return; 
			case DslPackage.FINALLY:
				sequence_Finally(context, (Finally) semanticObject); 
				return; 
			case DslPackage.FORKPROCESS:
				sequence_Forkprocess(context, (Forkprocess) semanticObject); 
				return; 
			case DslPackage.INSERT_SQL:
				sequence_InsertSql(context, (InsertSql) semanticObject); 
				return; 
			case DslPackage.JSON_DESERIALIZE:
				sequence_JsonDeserialize(context, (JsonDeserialize) semanticObject); 
				return; 
			case DslPackage.JSON_TRANSFORM:
				sequence_JsonTransform(context, (JsonTransform) semanticObject); 
				return; 
			case DslPackage.LIST_FILES:
				sequence_ListFiles(context, (ListFiles) semanticObject); 
				return; 
			case DslPackage.LOAD_CSV:
				sequence_LoadCsv(context, (LoadCsv) semanticObject); 
				return; 
			case DslPackage.MONGO2_DB:
				sequence_Mongo2Db(context, (Mongo2Db) semanticObject); 
				return; 
			case DslPackage.PROCESS:
				sequence_Process(context, (in.handyman.dsl.Process) semanticObject); 
				return; 
			case DslPackage.PYTHON:
				sequence_Python(context, (Python) semanticObject); 
				return; 
			case DslPackage.REST:
				sequence_Rest(context, (Rest) semanticObject); 
				return; 
			case DslPackage.REST_API:
				sequence_RestApi(context, (RestApi) semanticObject); 
				return; 
			case DslPackage.REST_PART:
				sequence_RestPart(context, (RestPart) semanticObject); 
				return; 
			case DslPackage.SEND_EMAIL:
				sequence_SendEMail(context, (SendEMail) semanticObject); 
				return; 
			case DslPackage.TERMINAL:
				sequence_Terminal(context, (Terminal) semanticObject); 
				return; 
			case DslPackage.TRANSFORM:
				sequence_Transform(context, (Transform) semanticObject); 
				return; 
			case DslPackage.TRUNCATE_SQL:
				sequence_TruncateSql(context, (TruncateSql) semanticObject); 
				return; 
			case DslPackage.TRY:
				sequence_Try(context, (Try) semanticObject); 
				return; 
			case DslPackage.UNZIP:
				sequence_Unzip(context, (Unzip) semanticObject); 
				return; 
			case DslPackage.UPDATE_SQL:
				sequence_UpdateSql(context, (UpdateSql) semanticObject); 
				return; 
			case DslPackage.WRITE_CSV:
				sequence_WriteCsv(context, (WriteCsv) semanticObject); 
				return; 
			case DslPackage.ZIP:
				sequence_Zip(context, (Zip) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Abort
	 *     Abort returns Abort
	 *
	 * Constraint:
	 *     (name=STRING value=STRING condition=Expression)
	 */
	protected void sequence_Abort(ISerializationContext context, Abort semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ABORT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ABORT__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAbortAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAbortAccess().getValueSTRINGTerminalRuleCall_4_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getAbortAccess().getConditionExpressionParserRuleCall_7_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Callprocess
	 *     Callprocess returns Callprocess
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         target=STRING 
	 *         source=STRING 
	 *         datasource=STRING 
	 *         value=SelectStatement 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_Callprocess(ISerializationContext context, Callprocess semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.CALLPROCESS__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.CALLPROCESS__TARGET));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.CALLPROCESS__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.CALLPROCESS__SOURCE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.CALLPROCESS__DATASOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.CALLPROCESS__DATASOURCE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.CALLPROCESS__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.CALLPROCESS__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCallprocessAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCallprocessAccess().getTargetSTRINGTerminalRuleCall_4_0(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getCallprocessAccess().getSourceSTRINGTerminalRuleCall_6_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getCallprocessAccess().getDatasourceSTRINGTerminalRuleCall_8_0(), semanticObject.getDatasource());
		feeder.accept(grammarAccess.getCallprocessAccess().getValueSelectStatementParserRuleCall_11_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getCallprocessAccess().getConditionExpressionParserRuleCall_14_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Catch returns Catch
	 *
	 * Constraint:
	 *     action+=Action+
	 */
	protected void sequence_Catch(ISerializationContext context, Catch semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Checksum
	 *     Checksum returns Checksum
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         host=STRING 
	 *         port=STRING 
	 *         username=STRING 
	 *         password=STRING 
	 *         localDir=STRING 
	 *         localFile=STRING 
	 *         remoteDir=STRING 
	 *         remoteFile=STRING 
	 *         value=SelectStatement 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_Checksum(ISerializationContext context, Checksum semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.CHECKSUM__HOST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.CHECKSUM__HOST));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.CHECKSUM__PORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.CHECKSUM__PORT));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.CHECKSUM__USERNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.CHECKSUM__USERNAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.CHECKSUM__PASSWORD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.CHECKSUM__PASSWORD));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.CHECKSUM__LOCAL_DIR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.CHECKSUM__LOCAL_DIR));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.CHECKSUM__LOCAL_FILE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.CHECKSUM__LOCAL_FILE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.CHECKSUM__REMOTE_DIR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.CHECKSUM__REMOTE_DIR));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.CHECKSUM__REMOTE_FILE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.CHECKSUM__REMOTE_FILE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.CHECKSUM__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.CHECKSUM__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getChecksumAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getChecksumAccess().getHostSTRINGTerminalRuleCall_4_0(), semanticObject.getHost());
		feeder.accept(grammarAccess.getChecksumAccess().getPortSTRINGTerminalRuleCall_6_0(), semanticObject.getPort());
		feeder.accept(grammarAccess.getChecksumAccess().getUsernameSTRINGTerminalRuleCall_8_0(), semanticObject.getUsername());
		feeder.accept(grammarAccess.getChecksumAccess().getPasswordSTRINGTerminalRuleCall_10_0(), semanticObject.getPassword());
		feeder.accept(grammarAccess.getChecksumAccess().getLocalDirSTRINGTerminalRuleCall_12_0(), semanticObject.getLocalDir());
		feeder.accept(grammarAccess.getChecksumAccess().getLocalFileSTRINGTerminalRuleCall_14_0(), semanticObject.getLocalFile());
		feeder.accept(grammarAccess.getChecksumAccess().getRemoteDirSTRINGTerminalRuleCall_16_0(), semanticObject.getRemoteDir());
		feeder.accept(grammarAccess.getChecksumAccess().getRemoteFileSTRINGTerminalRuleCall_18_0(), semanticObject.getRemoteFile());
		feeder.accept(grammarAccess.getChecksumAccess().getValueSelectStatementParserRuleCall_21_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getChecksumAccess().getConditionExpressionParserRuleCall_24_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Copydata
	 *     Copydata returns Copydata
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         source=STRING 
	 *         to=STRING 
	 *         target=STRING 
	 *         limit=STRING 
	 *         value=SelectStatement 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_Copydata(ISerializationContext context, Copydata semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.COPYDATA__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.COPYDATA__SOURCE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.COPYDATA__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.COPYDATA__TO));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.COPYDATA__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.COPYDATA__TARGET));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.COPYDATA__LIMIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.COPYDATA__LIMIT));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.COPYDATA__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.COPYDATA__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCopydataAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCopydataAccess().getSourceSTRINGTerminalRuleCall_4_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getCopydataAccess().getToSTRINGTerminalRuleCall_6_0(), semanticObject.getTo());
		feeder.accept(grammarAccess.getCopydataAccess().getTargetSTRINGTerminalRuleCall_8_0(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getCopydataAccess().getLimitSTRINGTerminalRuleCall_10_0(), semanticObject.getLimit());
		feeder.accept(grammarAccess.getCopydataAccess().getValueSelectStatementParserRuleCall_13_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getCopydataAccess().getConditionExpressionParserRuleCall_16_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns DeleteFolder
	 *     DeleteFolder returns DeleteFolder
	 *
	 * Constraint:
	 *     (name=STRING foldersource=STRING zipsource=STRING value=SelectStatement condition=Expression)
	 */
	protected void sequence_DeleteFolder(ISerializationContext context, DeleteFolder semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.DELETE_FOLDER__FOLDERSOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.DELETE_FOLDER__FOLDERSOURCE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.DELETE_FOLDER__ZIPSOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.DELETE_FOLDER__ZIPSOURCE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.DELETE_FOLDER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.DELETE_FOLDER__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeleteFolderAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDeleteFolderAccess().getFoldersourceSTRINGTerminalRuleCall_4_0(), semanticObject.getFoldersource());
		feeder.accept(grammarAccess.getDeleteFolderAccess().getZipsourceSTRINGTerminalRuleCall_6_0(), semanticObject.getZipsource());
		feeder.accept(grammarAccess.getDeleteFolderAccess().getValueSelectStatementParserRuleCall_8_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getDeleteFolderAccess().getConditionExpressionParserRuleCall_11_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns DeleteSql
	 *     DeleteSql returns DeleteSql
	 *
	 * Constraint:
	 *     (name=STRING on=STRING value+=NonSelectStatement condition=Expression)
	 */
	protected void sequence_DeleteSql(ISerializationContext context, DeleteSql semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Doozle
	 *     Doozle returns Doozle
	 *
	 * Constraint:
	 *     (name=STRING target=STRING on=STRING value=CreateStatement condition=Expression)
	 */
	protected void sequence_Doozle(ISerializationContext context, Doozle semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.DOOZLE__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.DOOZLE__TARGET));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.DOOZLE__ON) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.DOOZLE__ON));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.DOOZLE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.DOOZLE__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDoozleAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDoozleAccess().getTargetSTRINGTerminalRuleCall_4_0(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getDoozleAccess().getOnSTRINGTerminalRuleCall_6_0(), semanticObject.getOn());
		feeder.accept(grammarAccess.getDoozleAccess().getValueCreateStatementParserRuleCall_9_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getDoozleAccess().getConditionExpressionParserRuleCall_12_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns DropSql
	 *     DropSql returns DropSql
	 *
	 * Constraint:
	 *     (name=STRING on=STRING value+=NonSelectStatement condition=Expression)
	 */
	protected void sequence_DropSql(ISerializationContext context, DropSql semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Dropfile
	 *     Dropfile returns Dropfile
	 *
	 * Constraint:
	 *     (name=STRING target=STRING condition=Expression)
	 */
	protected void sequence_Dropfile(ISerializationContext context, Dropfile semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.DROPFILE__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.DROPFILE__TARGET));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDropfileAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDropfileAccess().getTargetSTRINGTerminalRuleCall_4_0(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getDropfileAccess().getConditionExpressionParserRuleCall_6_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns ExecJava
	 *     ExecJava returns ExecJava
	 *
	 * Constraint:
	 *     (name=STRING classFqn=STRING dbSrc=STRING value=STRING condition=Expression)
	 */
	protected void sequence_ExecJava(ISerializationContext context, ExecJava semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.EXEC_JAVA__CLASS_FQN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.EXEC_JAVA__CLASS_FQN));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.EXEC_JAVA__DB_SRC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.EXEC_JAVA__DB_SRC));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.EXEC_JAVA__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.EXEC_JAVA__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExecJavaAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getExecJavaAccess().getClassFqnSTRINGTerminalRuleCall_4_0(), semanticObject.getClassFqn());
		feeder.accept(grammarAccess.getExecJavaAccess().getDbSrcSTRINGTerminalRuleCall_6_0(), semanticObject.getDbSrc());
		feeder.accept(grammarAccess.getExecJavaAccess().getValueSTRINGTerminalRuleCall_8_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getExecJavaAccess().getConditionExpressionParserRuleCall_11_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Expression
	 *
	 * Constraint:
	 *     (lhs=STRING operator=Operator rhs=STRING)
	 */
	protected void sequence_Expression(ISerializationContext context, Expression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.EXPRESSION__LHS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.EXPRESSION__LHS));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.EXPRESSION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.EXPRESSION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.EXPRESSION__RHS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.EXPRESSION__RHS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionAccess().getLhsSTRINGTerminalRuleCall_1_0(), semanticObject.getLhs());
		feeder.accept(grammarAccess.getExpressionAccess().getOperatorOperatorParserRuleCall_2_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getExpressionAccess().getRhsSTRINGTerminalRuleCall_3_0(), semanticObject.getRhs());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns FTP
	 *     FTP returns FTP
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         host=STRING 
	 *         port=STRING 
	 *         username=STRING 
	 *         password=STRING 
	 *         action=STRING 
	 *         localDir=STRING 
	 *         localFile=STRING 
	 *         remoteDir=STRING 
	 *         remoteFile=STRING 
	 *         source=STRING 
	 *         targetTable=STRING 
	 *         value=STRING 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_FTP(ISerializationContext context, FTP semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FTP__HOST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FTP__HOST));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FTP__PORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FTP__PORT));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FTP__USERNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FTP__USERNAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FTP__PASSWORD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FTP__PASSWORD));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FTP__ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FTP__ACTION));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FTP__LOCAL_DIR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FTP__LOCAL_DIR));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FTP__LOCAL_FILE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FTP__LOCAL_FILE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FTP__REMOTE_DIR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FTP__REMOTE_DIR));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FTP__REMOTE_FILE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FTP__REMOTE_FILE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FTP__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FTP__SOURCE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FTP__TARGET_TABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FTP__TARGET_TABLE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FTP__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FTP__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFTPAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFTPAccess().getHostSTRINGTerminalRuleCall_4_0(), semanticObject.getHost());
		feeder.accept(grammarAccess.getFTPAccess().getPortSTRINGTerminalRuleCall_6_0(), semanticObject.getPort());
		feeder.accept(grammarAccess.getFTPAccess().getUsernameSTRINGTerminalRuleCall_8_0(), semanticObject.getUsername());
		feeder.accept(grammarAccess.getFTPAccess().getPasswordSTRINGTerminalRuleCall_10_0(), semanticObject.getPassword());
		feeder.accept(grammarAccess.getFTPAccess().getActionSTRINGTerminalRuleCall_12_0(), semanticObject.getAction());
		feeder.accept(grammarAccess.getFTPAccess().getLocalDirSTRINGTerminalRuleCall_14_0(), semanticObject.getLocalDir());
		feeder.accept(grammarAccess.getFTPAccess().getLocalFileSTRINGTerminalRuleCall_16_0(), semanticObject.getLocalFile());
		feeder.accept(grammarAccess.getFTPAccess().getRemoteDirSTRINGTerminalRuleCall_18_0(), semanticObject.getRemoteDir());
		feeder.accept(grammarAccess.getFTPAccess().getRemoteFileSTRINGTerminalRuleCall_20_0(), semanticObject.getRemoteFile());
		feeder.accept(grammarAccess.getFTPAccess().getSourceSTRINGTerminalRuleCall_22_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getFTPAccess().getTargetTableSTRINGTerminalRuleCall_24_0(), semanticObject.getTargetTable());
		feeder.accept(grammarAccess.getFTPAccess().getValueSTRINGTerminalRuleCall_27_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getFTPAccess().getConditionExpressionParserRuleCall_30_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Fetch
	 *     Fetch returns Fetch
	 *
	 * Constraint:
	 *     (name=STRING source=STRING value=STRING condition=Expression)
	 */
	protected void sequence_Fetch(ISerializationContext context, Fetch semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FETCH__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FETCH__SOURCE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FETCH__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FETCH__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFetchAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFetchAccess().getSourceSTRINGTerminalRuleCall_4_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getFetchAccess().getValueSTRINGTerminalRuleCall_7_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getFetchAccess().getConditionExpressionParserRuleCall_10_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Finally returns Finally
	 *
	 * Constraint:
	 *     action+=Action+
	 */
	protected void sequence_Finally(ISerializationContext context, Finally semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Forkprocess
	 *     Forkprocess returns Forkprocess
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         target=STRING 
	 *         source=STRING 
	 *         datasource=STRING 
	 *         value=SelectStatement 
	 *         forkBatchSize=STRING 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_Forkprocess(ISerializationContext context, Forkprocess semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FORKPROCESS__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FORKPROCESS__TARGET));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FORKPROCESS__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FORKPROCESS__SOURCE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FORKPROCESS__DATASOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FORKPROCESS__DATASOURCE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FORKPROCESS__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FORKPROCESS__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FORKPROCESS__FORK_BATCH_SIZE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FORKPROCESS__FORK_BATCH_SIZE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getForkprocessAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getForkprocessAccess().getTargetSTRINGTerminalRuleCall_4_0(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getForkprocessAccess().getSourceSTRINGTerminalRuleCall_6_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getForkprocessAccess().getDatasourceSTRINGTerminalRuleCall_8_0(), semanticObject.getDatasource());
		feeder.accept(grammarAccess.getForkprocessAccess().getValueSelectStatementParserRuleCall_11_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getForkprocessAccess().getForkBatchSizeSTRINGTerminalRuleCall_14_0(), semanticObject.getForkBatchSize());
		feeder.accept(grammarAccess.getForkprocessAccess().getConditionExpressionParserRuleCall_16_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns InsertSql
	 *     InsertSql returns InsertSql
	 *
	 * Constraint:
	 *     (name=STRING on=STRING value+=NonSelectStatement condition=Expression)
	 */
	protected void sequence_InsertSql(ISerializationContext context, InsertSql semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns JsonDeserialize
	 *     JsonDeserialize returns JsonDeserialize
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         source=STRING 
	 *         targetTable=STRING 
	 *         input=STRING 
	 *         value=SelectStatement 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_JsonDeserialize(ISerializationContext context, JsonDeserialize semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.JSON_DESERIALIZE__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.JSON_DESERIALIZE__SOURCE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.JSON_DESERIALIZE__TARGET_TABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.JSON_DESERIALIZE__TARGET_TABLE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.JSON_DESERIALIZE__INPUT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.JSON_DESERIALIZE__INPUT));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.JSON_DESERIALIZE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.JSON_DESERIALIZE__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonDeserializeAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getJsonDeserializeAccess().getSourceSTRINGTerminalRuleCall_4_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getJsonDeserializeAccess().getTargetTableSTRINGTerminalRuleCall_6_0(), semanticObject.getTargetTable());
		feeder.accept(grammarAccess.getJsonDeserializeAccess().getInputSTRINGTerminalRuleCall_8_0(), semanticObject.getInput());
		feeder.accept(grammarAccess.getJsonDeserializeAccess().getValueSelectStatementParserRuleCall_11_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getJsonDeserializeAccess().getConditionExpressionParserRuleCall_14_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns JsonTransform
	 *     JsonTransform returns JsonTransform
	 *
	 * Constraint:
	 *     (name=STRING source=STRING targetTable=STRING value=SelectStatement condition=Expression)
	 */
	protected void sequence_JsonTransform(ISerializationContext context, JsonTransform semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.JSON_TRANSFORM__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.JSON_TRANSFORM__SOURCE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.JSON_TRANSFORM__TARGET_TABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.JSON_TRANSFORM__TARGET_TABLE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.JSON_TRANSFORM__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.JSON_TRANSFORM__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonTransformAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getJsonTransformAccess().getSourceSTRINGTerminalRuleCall_4_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getJsonTransformAccess().getTargetTableSTRINGTerminalRuleCall_6_0(), semanticObject.getTargetTable());
		feeder.accept(grammarAccess.getJsonTransformAccess().getValueSelectStatementParserRuleCall_9_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getJsonTransformAccess().getConditionExpressionParserRuleCall_12_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns ListFiles
	 *     ListFiles returns ListFiles
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         source=STRING 
	 *         to=STRING 
	 *         targetTable=STRING 
	 *         value=SelectStatement 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_ListFiles(ISerializationContext context, ListFiles semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.LIST_FILES__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.LIST_FILES__SOURCE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.LIST_FILES__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.LIST_FILES__TO));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.LIST_FILES__TARGET_TABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.LIST_FILES__TARGET_TABLE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.LIST_FILES__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.LIST_FILES__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getListFilesAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getListFilesAccess().getSourceSTRINGTerminalRuleCall_4_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getListFilesAccess().getToSTRINGTerminalRuleCall_6_0(), semanticObject.getTo());
		feeder.accept(grammarAccess.getListFilesAccess().getTargetTableSTRINGTerminalRuleCall_8_0(), semanticObject.getTargetTable());
		feeder.accept(grammarAccess.getListFilesAccess().getValueSelectStatementParserRuleCall_11_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getListFilesAccess().getConditionExpressionParserRuleCall_14_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns LoadCsv
	 *     LoadCsv returns LoadCsv
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         pid=STRING 
	 *         source=STRING 
	 *         to=STRING 
	 *         delim=STRING 
	 *         limit=STRING 
	 *         value=SelectStatement 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_LoadCsv(ISerializationContext context, LoadCsv semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.LOAD_CSV__PID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.LOAD_CSV__PID));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.LOAD_CSV__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.LOAD_CSV__SOURCE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.LOAD_CSV__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.LOAD_CSV__TO));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.LOAD_CSV__DELIM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.LOAD_CSV__DELIM));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.LOAD_CSV__LIMIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.LOAD_CSV__LIMIT));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.LOAD_CSV__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.LOAD_CSV__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLoadCsvAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getLoadCsvAccess().getPidSTRINGTerminalRuleCall_4_0(), semanticObject.getPid());
		feeder.accept(grammarAccess.getLoadCsvAccess().getSourceSTRINGTerminalRuleCall_6_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getLoadCsvAccess().getToSTRINGTerminalRuleCall_8_0(), semanticObject.getTo());
		feeder.accept(grammarAccess.getLoadCsvAccess().getDelimSTRINGTerminalRuleCall_10_0(), semanticObject.getDelim());
		feeder.accept(grammarAccess.getLoadCsvAccess().getLimitSTRINGTerminalRuleCall_12_0(), semanticObject.getLimit());
		feeder.accept(grammarAccess.getLoadCsvAccess().getValueSelectStatementParserRuleCall_15_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getLoadCsvAccess().getConditionExpressionParserRuleCall_18_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Mongo2Db
	 *     Mongo2Db returns Mongo2Db
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         sourceConnStr=STRING 
	 *         to=STRING 
	 *         sourceDb=STRING 
	 *         targetDb=STRING 
	 *         targetTable=STRING 
	 *         filter=STRING 
	 *         limit=STRING 
	 *         findAttr=STRING 
	 *         applyManipulation=STRING 
	 *         onUpdateKey=STRING 
	 *         fetchBatchSize=STRING 
	 *         writeBatchSize=STRING 
	 *         value=SelectStatement 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_Mongo2Db(ISerializationContext context, Mongo2Db semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MONGO2_DB__SOURCE_CONN_STR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MONGO2_DB__SOURCE_CONN_STR));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MONGO2_DB__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MONGO2_DB__TO));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MONGO2_DB__SOURCE_DB) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MONGO2_DB__SOURCE_DB));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MONGO2_DB__TARGET_DB) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MONGO2_DB__TARGET_DB));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MONGO2_DB__TARGET_TABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MONGO2_DB__TARGET_TABLE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MONGO2_DB__FILTER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MONGO2_DB__FILTER));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MONGO2_DB__LIMIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MONGO2_DB__LIMIT));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MONGO2_DB__FIND_ATTR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MONGO2_DB__FIND_ATTR));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MONGO2_DB__APPLY_MANIPULATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MONGO2_DB__APPLY_MANIPULATION));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MONGO2_DB__ON_UPDATE_KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MONGO2_DB__ON_UPDATE_KEY));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MONGO2_DB__FETCH_BATCH_SIZE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MONGO2_DB__FETCH_BATCH_SIZE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MONGO2_DB__WRITE_BATCH_SIZE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MONGO2_DB__WRITE_BATCH_SIZE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MONGO2_DB__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MONGO2_DB__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMongo2DbAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMongo2DbAccess().getSourceConnStrSTRINGTerminalRuleCall_4_0(), semanticObject.getSourceConnStr());
		feeder.accept(grammarAccess.getMongo2DbAccess().getToSTRINGTerminalRuleCall_6_0(), semanticObject.getTo());
		feeder.accept(grammarAccess.getMongo2DbAccess().getSourceDbSTRINGTerminalRuleCall_8_0(), semanticObject.getSourceDb());
		feeder.accept(grammarAccess.getMongo2DbAccess().getTargetDbSTRINGTerminalRuleCall_10_0(), semanticObject.getTargetDb());
		feeder.accept(grammarAccess.getMongo2DbAccess().getTargetTableSTRINGTerminalRuleCall_12_0(), semanticObject.getTargetTable());
		feeder.accept(grammarAccess.getMongo2DbAccess().getFilterSTRINGTerminalRuleCall_14_0(), semanticObject.getFilter());
		feeder.accept(grammarAccess.getMongo2DbAccess().getLimitSTRINGTerminalRuleCall_16_0(), semanticObject.getLimit());
		feeder.accept(grammarAccess.getMongo2DbAccess().getFindAttrSTRINGTerminalRuleCall_18_0(), semanticObject.getFindAttr());
		feeder.accept(grammarAccess.getMongo2DbAccess().getApplyManipulationSTRINGTerminalRuleCall_20_0(), semanticObject.getApplyManipulation());
		feeder.accept(grammarAccess.getMongo2DbAccess().getOnUpdateKeySTRINGTerminalRuleCall_22_0(), semanticObject.getOnUpdateKey());
		feeder.accept(grammarAccess.getMongo2DbAccess().getFetchBatchSizeSTRINGTerminalRuleCall_24_0(), semanticObject.getFetchBatchSize());
		feeder.accept(grammarAccess.getMongo2DbAccess().getWriteBatchSizeSTRINGTerminalRuleCall_26_0(), semanticObject.getWriteBatchSize());
		feeder.accept(grammarAccess.getMongo2DbAccess().getValueSelectStatementParserRuleCall_29_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getMongo2DbAccess().getConditionExpressionParserRuleCall_32_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Process returns Process
	 *
	 * Constraint:
	 *     (name=STRING try=Try catch=Catch finally=Finally)
	 */
	protected void sequence_Process(ISerializationContext context, in.handyman.dsl.Process semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROCESS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROCESS__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROCESS__TRY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROCESS__TRY));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROCESS__CATCH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROCESS__CATCH));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROCESS__FINALLY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROCESS__FINALLY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProcessAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getProcessAccess().getTryTryParserRuleCall_3_0(), semanticObject.getTry());
		feeder.accept(grammarAccess.getProcessAccess().getCatchCatchParserRuleCall_4_0(), semanticObject.getCatch());
		feeder.accept(grammarAccess.getProcessAccess().getFinallyFinallyParserRuleCall_5_0(), semanticObject.getFinally());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Python
	 *     Python returns Python
	 *
	 * Constraint:
	 *     (name=STRING source=STRING target=STRING value=SelectStatement condition=Expression)
	 */
	protected void sequence_Python(ISerializationContext context, Python semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PYTHON__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PYTHON__SOURCE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PYTHON__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PYTHON__TARGET));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PYTHON__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PYTHON__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPythonAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPythonAccess().getSourceSTRINGTerminalRuleCall_4_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getPythonAccess().getTargetSTRINGTerminalRuleCall_6_0(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getPythonAccess().getValueSelectStatementParserRuleCall_9_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getPythonAccess().getConditionExpressionParserRuleCall_12_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns RestApi
	 *     RestApi returns RestApi
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         url=STRING 
	 *         method=STRING 
	 *         property=STRING 
	 *         payload=STRING 
	 *         source=STRING 
	 *         targetTable=STRING 
	 *         value=SelectStatement 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_RestApi(ISerializationContext context, RestApi semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.REST_API__URL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.REST_API__URL));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.REST_API__METHOD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.REST_API__METHOD));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.REST_API__PROPERTY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.REST_API__PROPERTY));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.REST_API__PAYLOAD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.REST_API__PAYLOAD));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.REST_API__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.REST_API__SOURCE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.REST_API__TARGET_TABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.REST_API__TARGET_TABLE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.REST_API__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.REST_API__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRestApiAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRestApiAccess().getUrlSTRINGTerminalRuleCall_4_0(), semanticObject.getUrl());
		feeder.accept(grammarAccess.getRestApiAccess().getMethodSTRINGTerminalRuleCall_6_0(), semanticObject.getMethod());
		feeder.accept(grammarAccess.getRestApiAccess().getPropertySTRINGTerminalRuleCall_8_0(), semanticObject.getProperty());
		feeder.accept(grammarAccess.getRestApiAccess().getPayloadSTRINGTerminalRuleCall_10_0(), semanticObject.getPayload());
		feeder.accept(grammarAccess.getRestApiAccess().getSourceSTRINGTerminalRuleCall_12_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getRestApiAccess().getTargetTableSTRINGTerminalRuleCall_14_0(), semanticObject.getTargetTable());
		feeder.accept(grammarAccess.getRestApiAccess().getValueSelectStatementParserRuleCall_17_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getRestApiAccess().getConditionExpressionParserRuleCall_20_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RestPart returns RestPart
	 *
	 * Constraint:
	 *     (partName=STRING partData=SelectStatement)
	 */
	protected void sequence_RestPart(ISerializationContext context, RestPart semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.REST_PART__PART_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.REST_PART__PART_NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.REST_PART__PART_DATA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.REST_PART__PART_DATA));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRestPartAccess().getPartNameSTRINGTerminalRuleCall_2_0(), semanticObject.getPartName());
		feeder.accept(grammarAccess.getRestPartAccess().getPartDataSelectStatementParserRuleCall_4_0(), semanticObject.getPartData());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Rest
	 *     Rest returns Rest
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         authtoken=STRING 
	 *         url=STRING 
	 *         method=STRING 
	 *         resourcedatafrom=STRING 
	 *         urldata=SelectStatement 
	 *         headerdatafrom=STRING 
	 *         headerdata=SelectStatement 
	 *         postdatafrom=STRING 
	 *         parentName=STRING 
	 *         parentdata=SelectStatement 
	 *         parts+=RestPart* 
	 *         ackdatato=STRING 
	 *         ackdata=SelectStatement 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_Rest(ISerializationContext context, Rest semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns SendEMail
	 *     SendEMail returns SendEMail
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         source=STRING 
	 *         smtphost=STRING 
	 *         smtpport=STRING 
	 *         from=STRING 
	 *         pass=STRING 
	 *         to=STRING 
	 *         cc=STRING 
	 *         bcc=STRING 
	 *         subject=STRING 
	 *         body=STRING 
	 *         signature=STRING 
	 *         value=SelectStatement 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_SendEMail(ISerializationContext context, SendEMail semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SEND_EMAIL__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SEND_EMAIL__SOURCE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SEND_EMAIL__SMTPHOST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SEND_EMAIL__SMTPHOST));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SEND_EMAIL__SMTPPORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SEND_EMAIL__SMTPPORT));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SEND_EMAIL__FROM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SEND_EMAIL__FROM));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SEND_EMAIL__PASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SEND_EMAIL__PASS));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SEND_EMAIL__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SEND_EMAIL__TO));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SEND_EMAIL__CC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SEND_EMAIL__CC));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SEND_EMAIL__BCC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SEND_EMAIL__BCC));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SEND_EMAIL__SUBJECT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SEND_EMAIL__SUBJECT));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SEND_EMAIL__BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SEND_EMAIL__BODY));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SEND_EMAIL__SIGNATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SEND_EMAIL__SIGNATURE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SEND_EMAIL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SEND_EMAIL__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSendEMailAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSendEMailAccess().getSourceSTRINGTerminalRuleCall_4_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getSendEMailAccess().getSmtphostSTRINGTerminalRuleCall_6_0(), semanticObject.getSmtphost());
		feeder.accept(grammarAccess.getSendEMailAccess().getSmtpportSTRINGTerminalRuleCall_8_0(), semanticObject.getSmtpport());
		feeder.accept(grammarAccess.getSendEMailAccess().getFromSTRINGTerminalRuleCall_10_0(), semanticObject.getFrom());
		feeder.accept(grammarAccess.getSendEMailAccess().getPassSTRINGTerminalRuleCall_12_0(), semanticObject.getPass());
		feeder.accept(grammarAccess.getSendEMailAccess().getToSTRINGTerminalRuleCall_14_0(), semanticObject.getTo());
		feeder.accept(grammarAccess.getSendEMailAccess().getCcSTRINGTerminalRuleCall_16_0(), semanticObject.getCc());
		feeder.accept(grammarAccess.getSendEMailAccess().getBccSTRINGTerminalRuleCall_18_0(), semanticObject.getBcc());
		feeder.accept(grammarAccess.getSendEMailAccess().getSubjectSTRINGTerminalRuleCall_20_0(), semanticObject.getSubject());
		feeder.accept(grammarAccess.getSendEMailAccess().getBodySTRINGTerminalRuleCall_22_0(), semanticObject.getBody());
		feeder.accept(grammarAccess.getSendEMailAccess().getSignatureSTRINGTerminalRuleCall_24_0(), semanticObject.getSignature());
		feeder.accept(grammarAccess.getSendEMailAccess().getValueSelectStatementParserRuleCall_27_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getSendEMailAccess().getConditionExpressionParserRuleCall_30_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Terminal
	 *     Terminal returns Terminal
	 *
	 * Constraint:
	 *     (name=STRING id=STRING value=STRING condition=Expression)
	 */
	protected void sequence_Terminal(ISerializationContext context, Terminal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.TERMINAL__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.TERMINAL__ID));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.TERMINAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.TERMINAL__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTerminalAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTerminalAccess().getIdSTRINGTerminalRuleCall_4_0(), semanticObject.getId());
		feeder.accept(grammarAccess.getTerminalAccess().getValueSTRINGTerminalRuleCall_7_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getTerminalAccess().getConditionExpressionParserRuleCall_10_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Transform
	 *     Transform returns Transform
	 *
	 * Constraint:
	 *     (name=STRING on=STRING value+=NonSelectStatement condition=Expression)
	 */
	protected void sequence_Transform(ISerializationContext context, Transform semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns TruncateSql
	 *     TruncateSql returns TruncateSql
	 *
	 * Constraint:
	 *     (name=STRING on=STRING value+=NonSelectStatement condition=Expression)
	 */
	protected void sequence_TruncateSql(ISerializationContext context, TruncateSql semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Try returns Try
	 *
	 * Constraint:
	 *     action+=Action+
	 */
	protected void sequence_Try(ISerializationContext context, Try semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Unzip
	 *     Unzip returns Unzip
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         source=STRING 
	 *         destDir=STRING 
	 *         bufferSize=STRING 
	 *         value=SelectStatement 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_Unzip(ISerializationContext context, Unzip semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.UNZIP__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.UNZIP__SOURCE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.UNZIP__DEST_DIR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.UNZIP__DEST_DIR));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.UNZIP__BUFFER_SIZE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.UNZIP__BUFFER_SIZE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.UNZIP__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.UNZIP__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUnzipAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getUnzipAccess().getSourceSTRINGTerminalRuleCall_4_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getUnzipAccess().getDestDirSTRINGTerminalRuleCall_6_0(), semanticObject.getDestDir());
		feeder.accept(grammarAccess.getUnzipAccess().getBufferSizeSTRINGTerminalRuleCall_8_0(), semanticObject.getBufferSize());
		feeder.accept(grammarAccess.getUnzipAccess().getValueSelectStatementParserRuleCall_11_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getUnzipAccess().getConditionExpressionParserRuleCall_14_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns UpdateSql
	 *     UpdateSql returns UpdateSql
	 *
	 * Constraint:
	 *     (name=STRING on=STRING value+=NonSelectStatement condition=Expression)
	 */
	protected void sequence_UpdateSql(ISerializationContext context, UpdateSql semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns WriteCsv
	 *     WriteCsv returns WriteCsv
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         source=STRING 
	 *         to=STRING 
	 *         delim=STRING 
	 *         value=SelectStatement 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_WriteCsv(ISerializationContext context, WriteCsv semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.WRITE_CSV__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.WRITE_CSV__SOURCE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.WRITE_CSV__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.WRITE_CSV__TO));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.WRITE_CSV__DELIM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.WRITE_CSV__DELIM));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.WRITE_CSV__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.WRITE_CSV__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWriteCsvAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getWriteCsvAccess().getSourceSTRINGTerminalRuleCall_4_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getWriteCsvAccess().getToSTRINGTerminalRuleCall_6_0(), semanticObject.getTo());
		feeder.accept(grammarAccess.getWriteCsvAccess().getDelimSTRINGTerminalRuleCall_8_0(), semanticObject.getDelim());
		feeder.accept(grammarAccess.getWriteCsvAccess().getValueSelectStatementParserRuleCall_11_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getWriteCsvAccess().getConditionExpressionParserRuleCall_14_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Zip
	 *     Zip returns Zip
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         zipFilePath=STRING 
	 *         zipFileName=STRING 
	 *         source=STRING 
	 *         bufferSize=STRING 
	 *         value=SelectStatement 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_Zip(ISerializationContext context, Zip semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ZIP__ZIP_FILE_PATH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ZIP__ZIP_FILE_PATH));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ZIP__ZIP_FILE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ZIP__ZIP_FILE_NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ZIP__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ZIP__SOURCE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ZIP__BUFFER_SIZE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ZIP__BUFFER_SIZE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ZIP__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ZIP__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getZipAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getZipAccess().getZipFilePathSTRINGTerminalRuleCall_4_0(), semanticObject.getZipFilePath());
		feeder.accept(grammarAccess.getZipAccess().getZipFileNameSTRINGTerminalRuleCall_6_0(), semanticObject.getZipFileName());
		feeder.accept(grammarAccess.getZipAccess().getSourceSTRINGTerminalRuleCall_8_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getZipAccess().getBufferSizeSTRINGTerminalRuleCall_10_0(), semanticObject.getBufferSize());
		feeder.accept(grammarAccess.getZipAccess().getValueSelectStatementParserRuleCall_13_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getZipAccess().getConditionExpressionParserRuleCall_16_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
}
