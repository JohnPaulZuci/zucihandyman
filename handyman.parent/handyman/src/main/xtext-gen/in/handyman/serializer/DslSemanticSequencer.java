/*
 * generated by Xtext 2.16.0
 */
package in.handyman.serializer;

import com.google.inject.Inject;
import in.handyman.dsl.Abort;
import in.handyman.dsl.Callprocess;
import in.handyman.dsl.Catch;
import in.handyman.dsl.ClickSendSms;
import in.handyman.dsl.Copydata;
import in.handyman.dsl.Doozle;
import in.handyman.dsl.Dropfile;
import in.handyman.dsl.DslPackage;
import in.handyman.dsl.ElasticFBCLead;
import in.handyman.dsl.ElasticGET;
import in.handyman.dsl.ExecJava;
import in.handyman.dsl.Expression;
import in.handyman.dsl.FBCLead;
import in.handyman.dsl.FBFormDownload;
import in.handyman.dsl.Fetch;
import in.handyman.dsl.Finally;
import in.handyman.dsl.FirebaseDatabasePut;
import in.handyman.dsl.FirebaseReactiveNotification;
import in.handyman.dsl.GooglecalPUT;
import in.handyman.dsl.GooglecontactPUT;
import in.handyman.dsl.GooglecontactSelectAll;
import in.handyman.dsl.LoadCsv;
import in.handyman.dsl.Rest;
import in.handyman.dsl.RestPart;
import in.handyman.dsl.SendMail;
import in.handyman.dsl.SlackPUT;
import in.handyman.dsl.SmsLeadSms;
import in.handyman.dsl.Transform;
import in.handyman.dsl.TrelloGET;
import in.handyman.dsl.TrelloPUT;
import in.handyman.dsl.Try;
import in.handyman.dsl.Updatedaudit;
import in.handyman.dsl.WriteCsv;
import in.handyman.services.DslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class DslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DslPackage.ABORT:
				sequence_Abort(context, (Abort) semanticObject); 
				return; 
			case DslPackage.CALLPROCESS:
				sequence_Callprocess(context, (Callprocess) semanticObject); 
				return; 
			case DslPackage.CATCH:
				sequence_Catch(context, (Catch) semanticObject); 
				return; 
			case DslPackage.CLICK_SEND_SMS:
				sequence_ClickSendSms(context, (ClickSendSms) semanticObject); 
				return; 
			case DslPackage.COPYDATA:
				sequence_Copydata(context, (Copydata) semanticObject); 
				return; 
			case DslPackage.DOOZLE:
				sequence_Doozle(context, (Doozle) semanticObject); 
				return; 
			case DslPackage.DROPFILE:
				sequence_Dropfile(context, (Dropfile) semanticObject); 
				return; 
			case DslPackage.ELASTIC_FBC_LEAD:
				sequence_ElasticFBCLead(context, (ElasticFBCLead) semanticObject); 
				return; 
			case DslPackage.ELASTIC_GET:
				sequence_ElasticGET(context, (ElasticGET) semanticObject); 
				return; 
			case DslPackage.EXEC_JAVA:
				sequence_ExecJava(context, (ExecJava) semanticObject); 
				return; 
			case DslPackage.EXPRESSION:
				sequence_Expression(context, (Expression) semanticObject); 
				return; 
			case DslPackage.FBC_LEAD:
				sequence_FBCLead(context, (FBCLead) semanticObject); 
				return; 
			case DslPackage.FB_FORM_DOWNLOAD:
				sequence_FBFormDownload(context, (FBFormDownload) semanticObject); 
				return; 
			case DslPackage.FETCH:
				sequence_Fetch(context, (Fetch) semanticObject); 
				return; 
			case DslPackage.FINALLY:
				sequence_Finally(context, (Finally) semanticObject); 
				return; 
			case DslPackage.FIREBASE_DATABASE_PUT:
				sequence_FirebaseDatabasePut(context, (FirebaseDatabasePut) semanticObject); 
				return; 
			case DslPackage.FIREBASE_REACTIVE_NOTIFICATION:
				sequence_FirebaseReactiveNotification(context, (FirebaseReactiveNotification) semanticObject); 
				return; 
			case DslPackage.GOOGLECAL_PUT:
				sequence_GooglecalPUT(context, (GooglecalPUT) semanticObject); 
				return; 
			case DslPackage.GOOGLECONTACT_PUT:
				sequence_GooglecontactPUT(context, (GooglecontactPUT) semanticObject); 
				return; 
			case DslPackage.GOOGLECONTACT_SELECT_ALL:
				sequence_GooglecontactSelectAll(context, (GooglecontactSelectAll) semanticObject); 
				return; 
			case DslPackage.LOAD_CSV:
				sequence_LoadCsv(context, (LoadCsv) semanticObject); 
				return; 
			case DslPackage.PROCESS:
				sequence_Process(context, (in.handyman.dsl.Process) semanticObject); 
				return; 
			case DslPackage.REST:
				sequence_Rest(context, (Rest) semanticObject); 
				return; 
			case DslPackage.REST_PART:
				sequence_RestPart(context, (RestPart) semanticObject); 
				return; 
			case DslPackage.SEND_MAIL:
				sequence_SendMail(context, (SendMail) semanticObject); 
				return; 
			case DslPackage.SLACK_PUT:
				sequence_SlackPUT(context, (SlackPUT) semanticObject); 
				return; 
			case DslPackage.SMS_LEAD_SMS:
				sequence_SmsLeadSms(context, (SmsLeadSms) semanticObject); 
				return; 
			case DslPackage.TRANSFORM:
				sequence_Transform(context, (Transform) semanticObject); 
				return; 
			case DslPackage.TRELLO_GET:
				sequence_TrelloGET(context, (TrelloGET) semanticObject); 
				return; 
			case DslPackage.TRELLO_PUT:
				sequence_TrelloPUT(context, (TrelloPUT) semanticObject); 
				return; 
			case DslPackage.TRY:
				sequence_Try(context, (Try) semanticObject); 
				return; 
			case DslPackage.UPDATEDAUDIT:
				sequence_Updatedaudit(context, (Updatedaudit) semanticObject); 
				return; 
			case DslPackage.WRITE_CSV:
				sequence_WriteCsv(context, (WriteCsv) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Abort
	 *     Abort returns Abort
	 *
	 * Constraint:
	 *     (name=STRING value=STRING condition=Expression)
	 */
	protected void sequence_Abort(ISerializationContext context, Abort semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ABORT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ABORT__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAbortAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAbortAccess().getValueSTRINGTerminalRuleCall_4_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getAbortAccess().getConditionExpressionParserRuleCall_7_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Callprocess
	 *     Callprocess returns Callprocess
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         target=STRING 
	 *         source=STRING 
	 *         datasource=STRING 
	 *         value=SelectStatement 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_Callprocess(ISerializationContext context, Callprocess semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.CALLPROCESS__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.CALLPROCESS__TARGET));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.CALLPROCESS__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.CALLPROCESS__SOURCE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.CALLPROCESS__DATASOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.CALLPROCESS__DATASOURCE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.CALLPROCESS__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.CALLPROCESS__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCallprocessAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCallprocessAccess().getTargetSTRINGTerminalRuleCall_4_0(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getCallprocessAccess().getSourceSTRINGTerminalRuleCall_6_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getCallprocessAccess().getDatasourceSTRINGTerminalRuleCall_8_0(), semanticObject.getDatasource());
		feeder.accept(grammarAccess.getCallprocessAccess().getValueSelectStatementParserRuleCall_11_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getCallprocessAccess().getConditionExpressionParserRuleCall_14_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Catch returns Catch
	 *
	 * Constraint:
	 *     (name=ID action+=Action*)
	 */
	protected void sequence_Catch(ISerializationContext context, Catch semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns ClickSendSms
	 *     ClickSendSms returns ClickSendSms
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         userid=STRING 
	 *         securityKey=STRING 
	 *         target=STRING 
	 *         value=STRING 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_ClickSendSms(ISerializationContext context, ClickSendSms semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.CLICK_SEND_SMS__USERID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.CLICK_SEND_SMS__USERID));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.CLICK_SEND_SMS__SECURITY_KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.CLICK_SEND_SMS__SECURITY_KEY));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.CLICK_SEND_SMS__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.CLICK_SEND_SMS__TARGET));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.CLICK_SEND_SMS__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.CLICK_SEND_SMS__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getClickSendSmsAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getClickSendSmsAccess().getUseridSTRINGTerminalRuleCall_4_0(), semanticObject.getUserid());
		feeder.accept(grammarAccess.getClickSendSmsAccess().getSecurityKeySTRINGTerminalRuleCall_6_0(), semanticObject.getSecurityKey());
		feeder.accept(grammarAccess.getClickSendSmsAccess().getTargetSTRINGTerminalRuleCall_8_0(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getClickSendSmsAccess().getValueSTRINGTerminalRuleCall_11_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getClickSendSmsAccess().getConditionExpressionParserRuleCall_14_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Copydata
	 *     Copydata returns Copydata
	 *
	 * Constraint:
	 *     (name=STRING source=STRING to=STRING value=SelectStatement condition=Expression)
	 */
	protected void sequence_Copydata(ISerializationContext context, Copydata semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.COPYDATA__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.COPYDATA__SOURCE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.COPYDATA__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.COPYDATA__TO));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.COPYDATA__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.COPYDATA__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCopydataAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCopydataAccess().getSourceSTRINGTerminalRuleCall_4_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getCopydataAccess().getToSTRINGTerminalRuleCall_6_0(), semanticObject.getTo());
		feeder.accept(grammarAccess.getCopydataAccess().getValueSelectStatementParserRuleCall_9_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getCopydataAccess().getConditionExpressionParserRuleCall_12_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Doozle
	 *     Doozle returns Doozle
	 *
	 * Constraint:
	 *     (name=STRING target=STRING on=STRING value=CreateStatement condition=Expression)
	 */
	protected void sequence_Doozle(ISerializationContext context, Doozle semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.DOOZLE__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.DOOZLE__TARGET));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.DOOZLE__ON) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.DOOZLE__ON));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.DOOZLE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.DOOZLE__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDoozleAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDoozleAccess().getTargetSTRINGTerminalRuleCall_4_0(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getDoozleAccess().getOnSTRINGTerminalRuleCall_6_0(), semanticObject.getOn());
		feeder.accept(grammarAccess.getDoozleAccess().getValueCreateStatementParserRuleCall_9_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getDoozleAccess().getConditionExpressionParserRuleCall_12_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Dropfile
	 *     Dropfile returns Dropfile
	 *
	 * Constraint:
	 *     (name=STRING target=STRING condition=Expression)
	 */
	protected void sequence_Dropfile(ISerializationContext context, Dropfile semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.DROPFILE__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.DROPFILE__TARGET));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDropfileAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDropfileAccess().getTargetSTRINGTerminalRuleCall_4_0(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getDropfileAccess().getConditionExpressionParserRuleCall_6_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns ElasticFBCLead
	 *     ElasticFBCLead returns ElasticFBCLead
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         accessToken=STRING 
	 *         appSecret=STRING 
	 *         accountId=STRING 
	 *         campaignId=STRING 
	 *         target=STRING 
	 *         value=STRING 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_ElasticFBCLead(ISerializationContext context, ElasticFBCLead semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ELASTIC_FBC_LEAD__ACCESS_TOKEN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ELASTIC_FBC_LEAD__ACCESS_TOKEN));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ELASTIC_FBC_LEAD__APP_SECRET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ELASTIC_FBC_LEAD__APP_SECRET));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ELASTIC_FBC_LEAD__ACCOUNT_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ELASTIC_FBC_LEAD__ACCOUNT_ID));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ELASTIC_FBC_LEAD__CAMPAIGN_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ELASTIC_FBC_LEAD__CAMPAIGN_ID));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ELASTIC_FBC_LEAD__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ELASTIC_FBC_LEAD__TARGET));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ELASTIC_FBC_LEAD__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ELASTIC_FBC_LEAD__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getElasticFBCLeadAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getElasticFBCLeadAccess().getAccessTokenSTRINGTerminalRuleCall_4_0(), semanticObject.getAccessToken());
		feeder.accept(grammarAccess.getElasticFBCLeadAccess().getAppSecretSTRINGTerminalRuleCall_6_0(), semanticObject.getAppSecret());
		feeder.accept(grammarAccess.getElasticFBCLeadAccess().getAccountIdSTRINGTerminalRuleCall_8_0(), semanticObject.getAccountId());
		feeder.accept(grammarAccess.getElasticFBCLeadAccess().getCampaignIdSTRINGTerminalRuleCall_10_0(), semanticObject.getCampaignId());
		feeder.accept(grammarAccess.getElasticFBCLeadAccess().getTargetSTRINGTerminalRuleCall_12_0(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getElasticFBCLeadAccess().getValueSTRINGTerminalRuleCall_15_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getElasticFBCLeadAccess().getConditionExpressionParserRuleCall_18_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns ElasticGET
	 *     ElasticGET returns ElasticGET
	 *
	 * Constraint:
	 *     (name=STRING source=STRING to=STRING value=SelectStatement condition=Expression)
	 */
	protected void sequence_ElasticGET(ISerializationContext context, ElasticGET semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ELASTIC_GET__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ELASTIC_GET__SOURCE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ELASTIC_GET__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ELASTIC_GET__TO));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ELASTIC_GET__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ELASTIC_GET__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getElasticGETAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getElasticGETAccess().getSourceSTRINGTerminalRuleCall_4_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getElasticGETAccess().getToSTRINGTerminalRuleCall_6_0(), semanticObject.getTo());
		feeder.accept(grammarAccess.getElasticGETAccess().getValueSelectStatementParserRuleCall_9_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getElasticGETAccess().getConditionExpressionParserRuleCall_12_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns ExecJava
	 *     ExecJava returns ExecJava
	 *
	 * Constraint:
	 *     (name=STRING classFqn=STRING dbSrc=STRING value=STRING condition=Expression)
	 */
	protected void sequence_ExecJava(ISerializationContext context, ExecJava semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.EXEC_JAVA__CLASS_FQN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.EXEC_JAVA__CLASS_FQN));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.EXEC_JAVA__DB_SRC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.EXEC_JAVA__DB_SRC));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.EXEC_JAVA__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.EXEC_JAVA__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExecJavaAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getExecJavaAccess().getClassFqnSTRINGTerminalRuleCall_4_0(), semanticObject.getClassFqn());
		feeder.accept(grammarAccess.getExecJavaAccess().getDbSrcSTRINGTerminalRuleCall_6_0(), semanticObject.getDbSrc());
		feeder.accept(grammarAccess.getExecJavaAccess().getValueSTRINGTerminalRuleCall_8_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getExecJavaAccess().getConditionExpressionParserRuleCall_11_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Expression
	 *
	 * Constraint:
	 *     (lhs=STRING operator=Operator rhs=STRING)
	 */
	protected void sequence_Expression(ISerializationContext context, Expression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.EXPRESSION__LHS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.EXPRESSION__LHS));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.EXPRESSION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.EXPRESSION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.EXPRESSION__RHS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.EXPRESSION__RHS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionAccess().getLhsSTRINGTerminalRuleCall_1_0(), semanticObject.getLhs());
		feeder.accept(grammarAccess.getExpressionAccess().getOperatorOperatorParserRuleCall_2_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getExpressionAccess().getRhsSTRINGTerminalRuleCall_3_0(), semanticObject.getRhs());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns FBCLead
	 *     FBCLead returns FBCLead
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         accessToken=STRING 
	 *         appSecret=STRING 
	 *         accountId=STRING 
	 *         campaignId=STRING 
	 *         target=STRING 
	 *         value=STRING 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_FBCLead(ISerializationContext context, FBCLead semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FBC_LEAD__ACCESS_TOKEN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FBC_LEAD__ACCESS_TOKEN));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FBC_LEAD__APP_SECRET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FBC_LEAD__APP_SECRET));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FBC_LEAD__ACCOUNT_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FBC_LEAD__ACCOUNT_ID));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FBC_LEAD__CAMPAIGN_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FBC_LEAD__CAMPAIGN_ID));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FBC_LEAD__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FBC_LEAD__TARGET));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FBC_LEAD__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FBC_LEAD__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFBCLeadAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFBCLeadAccess().getAccessTokenSTRINGTerminalRuleCall_4_0(), semanticObject.getAccessToken());
		feeder.accept(grammarAccess.getFBCLeadAccess().getAppSecretSTRINGTerminalRuleCall_6_0(), semanticObject.getAppSecret());
		feeder.accept(grammarAccess.getFBCLeadAccess().getAccountIdSTRINGTerminalRuleCall_8_0(), semanticObject.getAccountId());
		feeder.accept(grammarAccess.getFBCLeadAccess().getCampaignIdSTRINGTerminalRuleCall_10_0(), semanticObject.getCampaignId());
		feeder.accept(grammarAccess.getFBCLeadAccess().getTargetSTRINGTerminalRuleCall_12_0(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getFBCLeadAccess().getValueSTRINGTerminalRuleCall_15_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getFBCLeadAccess().getConditionExpressionParserRuleCall_18_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns FBFormDownload
	 *     FBFormDownload returns FBFormDownload
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         accessToken=STRING 
	 *         appSecret=STRING 
	 *         accountId=STRING 
	 *         formId=STRING 
	 *         target=STRING 
	 *         value=STRING 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_FBFormDownload(ISerializationContext context, FBFormDownload semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FB_FORM_DOWNLOAD__ACCESS_TOKEN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FB_FORM_DOWNLOAD__ACCESS_TOKEN));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FB_FORM_DOWNLOAD__APP_SECRET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FB_FORM_DOWNLOAD__APP_SECRET));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FB_FORM_DOWNLOAD__ACCOUNT_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FB_FORM_DOWNLOAD__ACCOUNT_ID));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FB_FORM_DOWNLOAD__FORM_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FB_FORM_DOWNLOAD__FORM_ID));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FB_FORM_DOWNLOAD__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FB_FORM_DOWNLOAD__TARGET));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FB_FORM_DOWNLOAD__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FB_FORM_DOWNLOAD__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFBFormDownloadAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFBFormDownloadAccess().getAccessTokenSTRINGTerminalRuleCall_4_0(), semanticObject.getAccessToken());
		feeder.accept(grammarAccess.getFBFormDownloadAccess().getAppSecretSTRINGTerminalRuleCall_6_0(), semanticObject.getAppSecret());
		feeder.accept(grammarAccess.getFBFormDownloadAccess().getAccountIdSTRINGTerminalRuleCall_8_0(), semanticObject.getAccountId());
		feeder.accept(grammarAccess.getFBFormDownloadAccess().getFormIdSTRINGTerminalRuleCall_10_0(), semanticObject.getFormId());
		feeder.accept(grammarAccess.getFBFormDownloadAccess().getTargetSTRINGTerminalRuleCall_12_0(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getFBFormDownloadAccess().getValueSTRINGTerminalRuleCall_15_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getFBFormDownloadAccess().getConditionExpressionParserRuleCall_18_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Fetch
	 *     Fetch returns Fetch
	 *
	 * Constraint:
	 *     (name=STRING source=STRING value=STRING condition=Expression)
	 */
	protected void sequence_Fetch(ISerializationContext context, Fetch semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FETCH__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FETCH__SOURCE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FETCH__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FETCH__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFetchAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFetchAccess().getSourceSTRINGTerminalRuleCall_4_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getFetchAccess().getValueSTRINGTerminalRuleCall_7_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getFetchAccess().getConditionExpressionParserRuleCall_10_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Finally returns Finally
	 *
	 * Constraint:
	 *     (name=ID action+=Action*)
	 */
	protected void sequence_Finally(ISerializationContext context, Finally semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns FirebaseDatabasePut
	 *     FirebaseDatabasePut returns FirebaseDatabasePut
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         url=STRING 
	 *         fbjson=STRING 
	 *         groupPath=STRING 
	 *         dbSrc=STRING 
	 *         classFqn=STRING 
	 *         value=STRING 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_FirebaseDatabasePut(ISerializationContext context, FirebaseDatabasePut semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FIREBASE_DATABASE_PUT__URL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FIREBASE_DATABASE_PUT__URL));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FIREBASE_DATABASE_PUT__FBJSON) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FIREBASE_DATABASE_PUT__FBJSON));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FIREBASE_DATABASE_PUT__GROUP_PATH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FIREBASE_DATABASE_PUT__GROUP_PATH));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FIREBASE_DATABASE_PUT__DB_SRC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FIREBASE_DATABASE_PUT__DB_SRC));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FIREBASE_DATABASE_PUT__CLASS_FQN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FIREBASE_DATABASE_PUT__CLASS_FQN));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FIREBASE_DATABASE_PUT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FIREBASE_DATABASE_PUT__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFirebaseDatabasePutAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFirebaseDatabasePutAccess().getUrlSTRINGTerminalRuleCall_4_0(), semanticObject.getUrl());
		feeder.accept(grammarAccess.getFirebaseDatabasePutAccess().getFbjsonSTRINGTerminalRuleCall_6_0(), semanticObject.getFbjson());
		feeder.accept(grammarAccess.getFirebaseDatabasePutAccess().getGroupPathSTRINGTerminalRuleCall_8_0(), semanticObject.getGroupPath());
		feeder.accept(grammarAccess.getFirebaseDatabasePutAccess().getDbSrcSTRINGTerminalRuleCall_10_0(), semanticObject.getDbSrc());
		feeder.accept(grammarAccess.getFirebaseDatabasePutAccess().getClassFqnSTRINGTerminalRuleCall_12_0(), semanticObject.getClassFqn());
		feeder.accept(grammarAccess.getFirebaseDatabasePutAccess().getValueSTRINGTerminalRuleCall_15_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getFirebaseDatabasePutAccess().getConditionExpressionParserRuleCall_18_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns FirebaseReactiveNotification
	 *     FirebaseReactiveNotification returns FirebaseReactiveNotification
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         url=STRING 
	 *         fbjson=STRING 
	 *         groupPath=STRING 
	 *         classFqn=STRING 
	 *         dbSrc=STRING 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_FirebaseReactiveNotification(ISerializationContext context, FirebaseReactiveNotification semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FIREBASE_REACTIVE_NOTIFICATION__URL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FIREBASE_REACTIVE_NOTIFICATION__URL));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FIREBASE_REACTIVE_NOTIFICATION__FBJSON) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FIREBASE_REACTIVE_NOTIFICATION__FBJSON));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FIREBASE_REACTIVE_NOTIFICATION__GROUP_PATH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FIREBASE_REACTIVE_NOTIFICATION__GROUP_PATH));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FIREBASE_REACTIVE_NOTIFICATION__CLASS_FQN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FIREBASE_REACTIVE_NOTIFICATION__CLASS_FQN));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FIREBASE_REACTIVE_NOTIFICATION__DB_SRC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FIREBASE_REACTIVE_NOTIFICATION__DB_SRC));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFirebaseReactiveNotificationAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFirebaseReactiveNotificationAccess().getUrlSTRINGTerminalRuleCall_4_0(), semanticObject.getUrl());
		feeder.accept(grammarAccess.getFirebaseReactiveNotificationAccess().getFbjsonSTRINGTerminalRuleCall_6_0(), semanticObject.getFbjson());
		feeder.accept(grammarAccess.getFirebaseReactiveNotificationAccess().getGroupPathSTRINGTerminalRuleCall_8_0(), semanticObject.getGroupPath());
		feeder.accept(grammarAccess.getFirebaseReactiveNotificationAccess().getClassFqnSTRINGTerminalRuleCall_10_0(), semanticObject.getClassFqn());
		feeder.accept(grammarAccess.getFirebaseReactiveNotificationAccess().getDbSrcSTRINGTerminalRuleCall_12_0(), semanticObject.getDbSrc());
		feeder.accept(grammarAccess.getFirebaseReactiveNotificationAccess().getConditionExpressionParserRuleCall_14_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns GooglecalPUT
	 *     GooglecalPUT returns GooglecalPUT
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         account=STRING 
	 *         privateKey=STRING 
	 *         ptwelveFile=STRING 
	 *         project=STRING 
	 *         impersonatedUser=STRING 
	 *         dbSrc=STRING 
	 *         value=STRING 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_GooglecalPUT(ISerializationContext context, GooglecalPUT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.GOOGLECAL_PUT__ACCOUNT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.GOOGLECAL_PUT__ACCOUNT));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.GOOGLECAL_PUT__PRIVATE_KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.GOOGLECAL_PUT__PRIVATE_KEY));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.GOOGLECAL_PUT__PTWELVE_FILE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.GOOGLECAL_PUT__PTWELVE_FILE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.GOOGLECAL_PUT__PROJECT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.GOOGLECAL_PUT__PROJECT));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.GOOGLECAL_PUT__IMPERSONATED_USER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.GOOGLECAL_PUT__IMPERSONATED_USER));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.GOOGLECAL_PUT__DB_SRC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.GOOGLECAL_PUT__DB_SRC));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.GOOGLECAL_PUT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.GOOGLECAL_PUT__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGooglecalPUTAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getGooglecalPUTAccess().getAccountSTRINGTerminalRuleCall_4_0(), semanticObject.getAccount());
		feeder.accept(grammarAccess.getGooglecalPUTAccess().getPrivateKeySTRINGTerminalRuleCall_6_0(), semanticObject.getPrivateKey());
		feeder.accept(grammarAccess.getGooglecalPUTAccess().getPtwelveFileSTRINGTerminalRuleCall_8_0(), semanticObject.getPtwelveFile());
		feeder.accept(grammarAccess.getGooglecalPUTAccess().getProjectSTRINGTerminalRuleCall_10_0(), semanticObject.getProject());
		feeder.accept(grammarAccess.getGooglecalPUTAccess().getImpersonatedUserSTRINGTerminalRuleCall_12_0(), semanticObject.getImpersonatedUser());
		feeder.accept(grammarAccess.getGooglecalPUTAccess().getDbSrcSTRINGTerminalRuleCall_14_0(), semanticObject.getDbSrc());
		feeder.accept(grammarAccess.getGooglecalPUTAccess().getValueSTRINGTerminalRuleCall_17_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getGooglecalPUTAccess().getConditionExpressionParserRuleCall_20_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns GooglecontactPUT
	 *     GooglecontactPUT returns GooglecontactPUT
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         account=STRING 
	 *         privateKey=STRING 
	 *         ptwelveFile=STRING 
	 *         project=STRING 
	 *         impersonatedUser=STRING 
	 *         dbSrc=STRING 
	 *         value=STRING 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_GooglecontactPUT(ISerializationContext context, GooglecontactPUT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.GOOGLECONTACT_PUT__ACCOUNT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.GOOGLECONTACT_PUT__ACCOUNT));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.GOOGLECONTACT_PUT__PRIVATE_KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.GOOGLECONTACT_PUT__PRIVATE_KEY));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.GOOGLECONTACT_PUT__PTWELVE_FILE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.GOOGLECONTACT_PUT__PTWELVE_FILE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.GOOGLECONTACT_PUT__PROJECT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.GOOGLECONTACT_PUT__PROJECT));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.GOOGLECONTACT_PUT__IMPERSONATED_USER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.GOOGLECONTACT_PUT__IMPERSONATED_USER));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.GOOGLECONTACT_PUT__DB_SRC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.GOOGLECONTACT_PUT__DB_SRC));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.GOOGLECONTACT_PUT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.GOOGLECONTACT_PUT__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGooglecontactPUTAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getGooglecontactPUTAccess().getAccountSTRINGTerminalRuleCall_4_0(), semanticObject.getAccount());
		feeder.accept(grammarAccess.getGooglecontactPUTAccess().getPrivateKeySTRINGTerminalRuleCall_6_0(), semanticObject.getPrivateKey());
		feeder.accept(grammarAccess.getGooglecontactPUTAccess().getPtwelveFileSTRINGTerminalRuleCall_8_0(), semanticObject.getPtwelveFile());
		feeder.accept(grammarAccess.getGooglecontactPUTAccess().getProjectSTRINGTerminalRuleCall_10_0(), semanticObject.getProject());
		feeder.accept(grammarAccess.getGooglecontactPUTAccess().getImpersonatedUserSTRINGTerminalRuleCall_12_0(), semanticObject.getImpersonatedUser());
		feeder.accept(grammarAccess.getGooglecontactPUTAccess().getDbSrcSTRINGTerminalRuleCall_14_0(), semanticObject.getDbSrc());
		feeder.accept(grammarAccess.getGooglecontactPUTAccess().getValueSTRINGTerminalRuleCall_17_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getGooglecontactPUTAccess().getConditionExpressionParserRuleCall_20_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns GooglecontactSelectAll
	 *     GooglecontactSelectAll returns GooglecontactSelectAll
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         account=STRING 
	 *         privateKey=STRING 
	 *         ptwelveFile=STRING 
	 *         project=STRING 
	 *         impersonatedUser=STRING 
	 *         dbSrc=STRING 
	 *         value=STRING 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_GooglecontactSelectAll(ISerializationContext context, GooglecontactSelectAll semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.GOOGLECONTACT_SELECT_ALL__ACCOUNT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.GOOGLECONTACT_SELECT_ALL__ACCOUNT));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.GOOGLECONTACT_SELECT_ALL__PRIVATE_KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.GOOGLECONTACT_SELECT_ALL__PRIVATE_KEY));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.GOOGLECONTACT_SELECT_ALL__PTWELVE_FILE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.GOOGLECONTACT_SELECT_ALL__PTWELVE_FILE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.GOOGLECONTACT_SELECT_ALL__PROJECT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.GOOGLECONTACT_SELECT_ALL__PROJECT));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.GOOGLECONTACT_SELECT_ALL__IMPERSONATED_USER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.GOOGLECONTACT_SELECT_ALL__IMPERSONATED_USER));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.GOOGLECONTACT_SELECT_ALL__DB_SRC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.GOOGLECONTACT_SELECT_ALL__DB_SRC));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.GOOGLECONTACT_SELECT_ALL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.GOOGLECONTACT_SELECT_ALL__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGooglecontactSelectAllAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getGooglecontactSelectAllAccess().getAccountSTRINGTerminalRuleCall_4_0(), semanticObject.getAccount());
		feeder.accept(grammarAccess.getGooglecontactSelectAllAccess().getPrivateKeySTRINGTerminalRuleCall_6_0(), semanticObject.getPrivateKey());
		feeder.accept(grammarAccess.getGooglecontactSelectAllAccess().getPtwelveFileSTRINGTerminalRuleCall_8_0(), semanticObject.getPtwelveFile());
		feeder.accept(grammarAccess.getGooglecontactSelectAllAccess().getProjectSTRINGTerminalRuleCall_10_0(), semanticObject.getProject());
		feeder.accept(grammarAccess.getGooglecontactSelectAllAccess().getImpersonatedUserSTRINGTerminalRuleCall_12_0(), semanticObject.getImpersonatedUser());
		feeder.accept(grammarAccess.getGooglecontactSelectAllAccess().getDbSrcSTRINGTerminalRuleCall_14_0(), semanticObject.getDbSrc());
		feeder.accept(grammarAccess.getGooglecontactSelectAllAccess().getValueSTRINGTerminalRuleCall_17_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getGooglecontactSelectAllAccess().getConditionExpressionParserRuleCall_20_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns LoadCsv
	 *     LoadCsv returns LoadCsv
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         source=STRING 
	 *         to=STRING 
	 *         delim=STRING 
	 *         value=SelectStatement 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_LoadCsv(ISerializationContext context, LoadCsv semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.LOAD_CSV__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.LOAD_CSV__SOURCE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.LOAD_CSV__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.LOAD_CSV__TO));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.LOAD_CSV__DELIM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.LOAD_CSV__DELIM));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.LOAD_CSV__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.LOAD_CSV__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLoadCsvAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getLoadCsvAccess().getSourceSTRINGTerminalRuleCall_4_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getLoadCsvAccess().getToSTRINGTerminalRuleCall_6_0(), semanticObject.getTo());
		feeder.accept(grammarAccess.getLoadCsvAccess().getDelimSTRINGTerminalRuleCall_8_0(), semanticObject.getDelim());
		feeder.accept(grammarAccess.getLoadCsvAccess().getValueSelectStatementParserRuleCall_11_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getLoadCsvAccess().getConditionExpressionParserRuleCall_14_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Process returns Process
	 *
	 * Constraint:
	 *     (name=STRING try=Try catch=Catch finally=Finally)
	 */
	protected void sequence_Process(ISerializationContext context, in.handyman.dsl.Process semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROCESS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROCESS__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROCESS__TRY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROCESS__TRY));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROCESS__CATCH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROCESS__CATCH));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROCESS__FINALLY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROCESS__FINALLY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProcessAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getProcessAccess().getTryTryParserRuleCall_3_0(), semanticObject.getTry());
		feeder.accept(grammarAccess.getProcessAccess().getCatchCatchParserRuleCall_4_0(), semanticObject.getCatch());
		feeder.accept(grammarAccess.getProcessAccess().getFinallyFinallyParserRuleCall_5_0(), semanticObject.getFinally());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RestPart returns RestPart
	 *
	 * Constraint:
	 *     (partName=STRING partData=SelectStatement)
	 */
	protected void sequence_RestPart(ISerializationContext context, RestPart semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.REST_PART__PART_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.REST_PART__PART_NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.REST_PART__PART_DATA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.REST_PART__PART_DATA));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRestPartAccess().getPartNameSTRINGTerminalRuleCall_2_0(), semanticObject.getPartName());
		feeder.accept(grammarAccess.getRestPartAccess().getPartDataSelectStatementParserRuleCall_4_0(), semanticObject.getPartData());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Rest
	 *     Rest returns Rest
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         authtoken=STRING 
	 *         url=STRING 
	 *         method=STRING 
	 *         resourcedatafrom=STRING 
	 *         urldata=SelectStatement 
	 *         headerdatafrom=STRING 
	 *         headerdata=SelectStatement 
	 *         postdatafrom=STRING 
	 *         parentName=STRING 
	 *         parentdata=SelectStatement 
	 *         parts+=RestPart* 
	 *         ackdatato=STRING 
	 *         ackdata=SelectStatement 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_Rest(ISerializationContext context, Rest semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns SendMail
	 *     SendMail returns SendMail
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         privateKey=STRING 
	 *         impersonatedUser=STRING 
	 *         dbSrc=STRING 
	 *         value=STRING 
	 *         condition=Expression 
	 *         dryrunMail=STRING
	 *     )
	 */
	protected void sequence_SendMail(ISerializationContext context, SendMail semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SEND_MAIL__PRIVATE_KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SEND_MAIL__PRIVATE_KEY));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SEND_MAIL__IMPERSONATED_USER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SEND_MAIL__IMPERSONATED_USER));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SEND_MAIL__DB_SRC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SEND_MAIL__DB_SRC));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SEND_MAIL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SEND_MAIL__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SEND_MAIL__DRYRUN_MAIL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SEND_MAIL__DRYRUN_MAIL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSendMailAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSendMailAccess().getPrivateKeySTRINGTerminalRuleCall_4_0(), semanticObject.getPrivateKey());
		feeder.accept(grammarAccess.getSendMailAccess().getImpersonatedUserSTRINGTerminalRuleCall_6_0(), semanticObject.getImpersonatedUser());
		feeder.accept(grammarAccess.getSendMailAccess().getDbSrcSTRINGTerminalRuleCall_8_0(), semanticObject.getDbSrc());
		feeder.accept(grammarAccess.getSendMailAccess().getValueSTRINGTerminalRuleCall_11_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getSendMailAccess().getConditionExpressionParserRuleCall_14_0(), semanticObject.getCondition());
		feeder.accept(grammarAccess.getSendMailAccess().getDryrunMailSTRINGTerminalRuleCall_16_0(), semanticObject.getDryrunMail());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns SlackPUT
	 *     SlackPUT returns SlackPUT
	 *
	 * Constraint:
	 *     (name=STRING team=STRING channel=STRING value=STRING condition=Expression)
	 */
	protected void sequence_SlackPUT(ISerializationContext context, SlackPUT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SLACK_PUT__TEAM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SLACK_PUT__TEAM));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SLACK_PUT__CHANNEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SLACK_PUT__CHANNEL));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SLACK_PUT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SLACK_PUT__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSlackPUTAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSlackPUTAccess().getTeamSTRINGTerminalRuleCall_4_0(), semanticObject.getTeam());
		feeder.accept(grammarAccess.getSlackPUTAccess().getChannelSTRINGTerminalRuleCall_6_0(), semanticObject.getChannel());
		feeder.accept(grammarAccess.getSlackPUTAccess().getValueSTRINGTerminalRuleCall_9_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getSlackPUTAccess().getConditionExpressionParserRuleCall_12_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns SmsLeadSms
	 *     SmsLeadSms returns SmsLeadSms
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         url=STRING 
	 *         sender=STRING 
	 *         account=STRING 
	 *         privateKey=STRING 
	 *         dbSrc=STRING 
	 *         value=STRING 
	 *         condition=Expression 
	 *         dryrunNumber=STRING
	 *     )
	 */
	protected void sequence_SmsLeadSms(ISerializationContext context, SmsLeadSms semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SMS_LEAD_SMS__URL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SMS_LEAD_SMS__URL));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SMS_LEAD_SMS__SENDER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SMS_LEAD_SMS__SENDER));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SMS_LEAD_SMS__ACCOUNT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SMS_LEAD_SMS__ACCOUNT));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SMS_LEAD_SMS__PRIVATE_KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SMS_LEAD_SMS__PRIVATE_KEY));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SMS_LEAD_SMS__DB_SRC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SMS_LEAD_SMS__DB_SRC));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SMS_LEAD_SMS__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SMS_LEAD_SMS__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SMS_LEAD_SMS__DRYRUN_NUMBER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SMS_LEAD_SMS__DRYRUN_NUMBER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSmsLeadSmsAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSmsLeadSmsAccess().getUrlSTRINGTerminalRuleCall_4_0(), semanticObject.getUrl());
		feeder.accept(grammarAccess.getSmsLeadSmsAccess().getSenderSTRINGTerminalRuleCall_6_0(), semanticObject.getSender());
		feeder.accept(grammarAccess.getSmsLeadSmsAccess().getAccountSTRINGTerminalRuleCall_8_0(), semanticObject.getAccount());
		feeder.accept(grammarAccess.getSmsLeadSmsAccess().getPrivateKeySTRINGTerminalRuleCall_10_0(), semanticObject.getPrivateKey());
		feeder.accept(grammarAccess.getSmsLeadSmsAccess().getDbSrcSTRINGTerminalRuleCall_12_0(), semanticObject.getDbSrc());
		feeder.accept(grammarAccess.getSmsLeadSmsAccess().getValueSTRINGTerminalRuleCall_15_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getSmsLeadSmsAccess().getConditionExpressionParserRuleCall_18_0(), semanticObject.getCondition());
		feeder.accept(grammarAccess.getSmsLeadSmsAccess().getDryrunNumberSTRINGTerminalRuleCall_20_0(), semanticObject.getDryrunNumber());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Transform
	 *     Transform returns Transform
	 *
	 * Constraint:
	 *     (name=STRING on=STRING value+=NonSelectStatement condition=Expression)
	 */
	protected void sequence_Transform(ISerializationContext context, Transform semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns TrelloGET
	 *     TrelloGET returns TrelloGET
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         authtoken=STRING 
	 *         key=STRING 
	 *         useraccount=STRING 
	 *         board=STRING 
	 *         target=STRING 
	 *         value=SelectStatement 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_TrelloGET(ISerializationContext context, TrelloGET semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.TRELLO_GET__AUTHTOKEN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.TRELLO_GET__AUTHTOKEN));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.TRELLO_GET__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.TRELLO_GET__KEY));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.TRELLO_GET__USERACCOUNT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.TRELLO_GET__USERACCOUNT));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.TRELLO_GET__BOARD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.TRELLO_GET__BOARD));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.TRELLO_GET__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.TRELLO_GET__TARGET));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.TRELLO_GET__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.TRELLO_GET__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTrelloGETAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTrelloGETAccess().getAuthtokenSTRINGTerminalRuleCall_4_0(), semanticObject.getAuthtoken());
		feeder.accept(grammarAccess.getTrelloGETAccess().getKeySTRINGTerminalRuleCall_6_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getTrelloGETAccess().getUseraccountSTRINGTerminalRuleCall_8_0(), semanticObject.getUseraccount());
		feeder.accept(grammarAccess.getTrelloGETAccess().getBoardSTRINGTerminalRuleCall_10_0(), semanticObject.getBoard());
		feeder.accept(grammarAccess.getTrelloGETAccess().getTargetSTRINGTerminalRuleCall_12_0(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getTrelloGETAccess().getValueSelectStatementParserRuleCall_15_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getTrelloGETAccess().getConditionExpressionParserRuleCall_18_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns TrelloPUT
	 *     TrelloPUT returns TrelloPUT
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         authtoken=STRING 
	 *         key=STRING 
	 *         useraccount=STRING 
	 *         list=STRING 
	 *         source=STRING 
	 *         value=SelectStatement 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_TrelloPUT(ISerializationContext context, TrelloPUT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.TRELLO_PUT__AUTHTOKEN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.TRELLO_PUT__AUTHTOKEN));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.TRELLO_PUT__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.TRELLO_PUT__KEY));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.TRELLO_PUT__USERACCOUNT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.TRELLO_PUT__USERACCOUNT));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.TRELLO_PUT__LIST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.TRELLO_PUT__LIST));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.TRELLO_PUT__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.TRELLO_PUT__SOURCE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.TRELLO_PUT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.TRELLO_PUT__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTrelloPUTAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTrelloPUTAccess().getAuthtokenSTRINGTerminalRuleCall_4_0(), semanticObject.getAuthtoken());
		feeder.accept(grammarAccess.getTrelloPUTAccess().getKeySTRINGTerminalRuleCall_6_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getTrelloPUTAccess().getUseraccountSTRINGTerminalRuleCall_8_0(), semanticObject.getUseraccount());
		feeder.accept(grammarAccess.getTrelloPUTAccess().getListSTRINGTerminalRuleCall_10_0(), semanticObject.getList());
		feeder.accept(grammarAccess.getTrelloPUTAccess().getSourceSTRINGTerminalRuleCall_12_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getTrelloPUTAccess().getValueSelectStatementParserRuleCall_15_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getTrelloPUTAccess().getConditionExpressionParserRuleCall_18_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Try returns Try
	 *
	 * Constraint:
	 *     (name=ID action+=Action*)
	 */
	protected void sequence_Try(ISerializationContext context, Try semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Updatedaudit
	 *     Updatedaudit returns Updatedaudit
	 *
	 * Constraint:
	 *     (name=STRING logsink=STRING datasource=STRING value=SelectStatement condition=Expression)
	 */
	protected void sequence_Updatedaudit(ISerializationContext context, Updatedaudit semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.UPDATEDAUDIT__LOGSINK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.UPDATEDAUDIT__LOGSINK));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.UPDATEDAUDIT__DATASOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.UPDATEDAUDIT__DATASOURCE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.UPDATEDAUDIT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.UPDATEDAUDIT__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUpdatedauditAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getUpdatedauditAccess().getLogsinkSTRINGTerminalRuleCall_4_0(), semanticObject.getLogsink());
		feeder.accept(grammarAccess.getUpdatedauditAccess().getDatasourceSTRINGTerminalRuleCall_6_0(), semanticObject.getDatasource());
		feeder.accept(grammarAccess.getUpdatedauditAccess().getValueSelectStatementParserRuleCall_9_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getUpdatedauditAccess().getConditionExpressionParserRuleCall_12_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns WriteCsv
	 *     WriteCsv returns WriteCsv
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         source=STRING 
	 *         to=STRING 
	 *         delim=STRING 
	 *         value=SelectStatement 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_WriteCsv(ISerializationContext context, WriteCsv semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.WRITE_CSV__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.WRITE_CSV__SOURCE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.WRITE_CSV__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.WRITE_CSV__TO));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.WRITE_CSV__DELIM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.WRITE_CSV__DELIM));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.WRITE_CSV__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.WRITE_CSV__VALUE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWriteCsvAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getWriteCsvAccess().getSourceSTRINGTerminalRuleCall_4_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getWriteCsvAccess().getToSTRINGTerminalRuleCall_6_0(), semanticObject.getTo());
		feeder.accept(grammarAccess.getWriteCsvAccess().getDelimSTRINGTerminalRuleCall_8_0(), semanticObject.getDelim());
		feeder.accept(grammarAccess.getWriteCsvAccess().getValueSelectStatementParserRuleCall_11_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getWriteCsvAccess().getConditionExpressionParserRuleCall_14_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
}
