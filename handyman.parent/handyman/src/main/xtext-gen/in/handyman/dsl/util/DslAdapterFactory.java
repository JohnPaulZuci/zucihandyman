/**
 * generated by Xtext 2.16.0
 */
package in.handyman.dsl.util;

import in.handyman.dsl.Abort;
import in.handyman.dsl.Action;
import in.handyman.dsl.Callprocess;
import in.handyman.dsl.Catch;
import in.handyman.dsl.Checksum;
import in.handyman.dsl.Copydata;
import in.handyman.dsl.DeleteFolder;
import in.handyman.dsl.DeleteSql;
import in.handyman.dsl.Doozle;
import in.handyman.dsl.DropSql;
import in.handyman.dsl.Dropfile;
import in.handyman.dsl.DslPackage;
import in.handyman.dsl.ExecJava;
import in.handyman.dsl.Expression;
import in.handyman.dsl.FTP;
import in.handyman.dsl.Fetch;
import in.handyman.dsl.Finally;
import in.handyman.dsl.Forkprocess;
import in.handyman.dsl.InsertSql;
import in.handyman.dsl.JsonDeserialize;
import in.handyman.dsl.JsonTransform;
import in.handyman.dsl.ListFiles;
import in.handyman.dsl.LoadCsv;
import in.handyman.dsl.Mongo2Db;
import in.handyman.dsl.Python;
import in.handyman.dsl.Rest;
import in.handyman.dsl.RestApi;
import in.handyman.dsl.RestPart;
import in.handyman.dsl.SendEMail;
import in.handyman.dsl.Terminal;
import in.handyman.dsl.Transform;
import in.handyman.dsl.TruncateSql;
import in.handyman.dsl.Try;
import in.handyman.dsl.Unzip;
import in.handyman.dsl.UpdateSql;
import in.handyman.dsl.WriteCsv;
import in.handyman.dsl.Zip;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see in.handyman.dsl.DslPackage
 * @generated
 */
public class DslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static DslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = DslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DslSwitch<Adapter> modelSwitch =
    new DslSwitch<Adapter>()
    {
      @Override
      public Adapter caseProcess(in.handyman.dsl.Process object)
      {
        return createProcessAdapter();
      }
      @Override
      public Adapter caseTry(Try object)
      {
        return createTryAdapter();
      }
      @Override
      public Adapter caseFinally(Finally object)
      {
        return createFinallyAdapter();
      }
      @Override
      public Adapter caseCatch(Catch object)
      {
        return createCatchAdapter();
      }
      @Override
      public Adapter caseAction(Action object)
      {
        return createActionAdapter();
      }
      @Override
      public Adapter caseSendEMail(SendEMail object)
      {
        return createSendEMailAdapter();
      }
      @Override
      public Adapter caseDeleteFolder(DeleteFolder object)
      {
        return createDeleteFolderAdapter();
      }
      @Override
      public Adapter caseTerminal(Terminal object)
      {
        return createTerminalAdapter();
      }
      @Override
      public Adapter caseExecJava(ExecJava object)
      {
        return createExecJavaAdapter();
      }
      @Override
      public Adapter caseAbort(Abort object)
      {
        return createAbortAdapter();
      }
      @Override
      public Adapter caseDropfile(Dropfile object)
      {
        return createDropfileAdapter();
      }
      @Override
      public Adapter caseDoozle(Doozle object)
      {
        return createDoozleAdapter();
      }
      @Override
      public Adapter caseFetch(Fetch object)
      {
        return createFetchAdapter();
      }
      @Override
      public Adapter caseCallprocess(Callprocess object)
      {
        return createCallprocessAdapter();
      }
      @Override
      public Adapter caseForkprocess(Forkprocess object)
      {
        return createForkprocessAdapter();
      }
      @Override
      public Adapter caseCopydata(Copydata object)
      {
        return createCopydataAdapter();
      }
      @Override
      public Adapter caseWriteCsv(WriteCsv object)
      {
        return createWriteCsvAdapter();
      }
      @Override
      public Adapter caseLoadCsv(LoadCsv object)
      {
        return createLoadCsvAdapter();
      }
      @Override
      public Adapter caseTransform(Transform object)
      {
        return createTransformAdapter();
      }
      @Override
      public Adapter caseDeleteSql(DeleteSql object)
      {
        return createDeleteSqlAdapter();
      }
      @Override
      public Adapter caseUpdateSql(UpdateSql object)
      {
        return createUpdateSqlAdapter();
      }
      @Override
      public Adapter caseInsertSql(InsertSql object)
      {
        return createInsertSqlAdapter();
      }
      @Override
      public Adapter caseTruncateSql(TruncateSql object)
      {
        return createTruncateSqlAdapter();
      }
      @Override
      public Adapter caseDropSql(DropSql object)
      {
        return createDropSqlAdapter();
      }
      @Override
      public Adapter caseListFiles(ListFiles object)
      {
        return createListFilesAdapter();
      }
      @Override
      public Adapter caseMongo2Db(Mongo2Db object)
      {
        return createMongo2DbAdapter();
      }
      @Override
      public Adapter caseFTP(FTP object)
      {
        return createFTPAdapter();
      }
      @Override
      public Adapter caseZip(Zip object)
      {
        return createZipAdapter();
      }
      @Override
      public Adapter caseUnzip(Unzip object)
      {
        return createUnzipAdapter();
      }
      @Override
      public Adapter caseChecksum(Checksum object)
      {
        return createChecksumAdapter();
      }
      @Override
      public Adapter caseJsonTransform(JsonTransform object)
      {
        return createJsonTransformAdapter();
      }
      @Override
      public Adapter caseJsonDeserialize(JsonDeserialize object)
      {
        return createJsonDeserializeAdapter();
      }
      @Override
      public Adapter caseRestApi(RestApi object)
      {
        return createRestApiAdapter();
      }
      @Override
      public Adapter casePython(Python object)
      {
        return createPythonAdapter();
      }
      @Override
      public Adapter caseRest(Rest object)
      {
        return createRestAdapter();
      }
      @Override
      public Adapter caseRestPart(RestPart object)
      {
        return createRestPartAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.Process <em>Process</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.Process
   * @generated
   */
  public Adapter createProcessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.Try <em>Try</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.Try
   * @generated
   */
  public Adapter createTryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.Finally <em>Finally</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.Finally
   * @generated
   */
  public Adapter createFinallyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.Catch <em>Catch</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.Catch
   * @generated
   */
  public Adapter createCatchAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.Action <em>Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.Action
   * @generated
   */
  public Adapter createActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.SendEMail <em>Send EMail</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.SendEMail
   * @generated
   */
  public Adapter createSendEMailAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.DeleteFolder <em>Delete Folder</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.DeleteFolder
   * @generated
   */
  public Adapter createDeleteFolderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.Terminal <em>Terminal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.Terminal
   * @generated
   */
  public Adapter createTerminalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.ExecJava <em>Exec Java</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.ExecJava
   * @generated
   */
  public Adapter createExecJavaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.Abort <em>Abort</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.Abort
   * @generated
   */
  public Adapter createAbortAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.Dropfile <em>Dropfile</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.Dropfile
   * @generated
   */
  public Adapter createDropfileAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.Doozle <em>Doozle</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.Doozle
   * @generated
   */
  public Adapter createDoozleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.Fetch <em>Fetch</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.Fetch
   * @generated
   */
  public Adapter createFetchAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.Callprocess <em>Callprocess</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.Callprocess
   * @generated
   */
  public Adapter createCallprocessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.Forkprocess <em>Forkprocess</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.Forkprocess
   * @generated
   */
  public Adapter createForkprocessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.Copydata <em>Copydata</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.Copydata
   * @generated
   */
  public Adapter createCopydataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.WriteCsv <em>Write Csv</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.WriteCsv
   * @generated
   */
  public Adapter createWriteCsvAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.LoadCsv <em>Load Csv</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.LoadCsv
   * @generated
   */
  public Adapter createLoadCsvAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.Transform <em>Transform</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.Transform
   * @generated
   */
  public Adapter createTransformAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.DeleteSql <em>Delete Sql</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.DeleteSql
   * @generated
   */
  public Adapter createDeleteSqlAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.UpdateSql <em>Update Sql</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.UpdateSql
   * @generated
   */
  public Adapter createUpdateSqlAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.InsertSql <em>Insert Sql</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.InsertSql
   * @generated
   */
  public Adapter createInsertSqlAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.TruncateSql <em>Truncate Sql</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.TruncateSql
   * @generated
   */
  public Adapter createTruncateSqlAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.DropSql <em>Drop Sql</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.DropSql
   * @generated
   */
  public Adapter createDropSqlAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.ListFiles <em>List Files</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.ListFiles
   * @generated
   */
  public Adapter createListFilesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.Mongo2Db <em>Mongo2 Db</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.Mongo2Db
   * @generated
   */
  public Adapter createMongo2DbAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.FTP <em>FTP</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.FTP
   * @generated
   */
  public Adapter createFTPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.Zip <em>Zip</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.Zip
   * @generated
   */
  public Adapter createZipAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.Unzip <em>Unzip</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.Unzip
   * @generated
   */
  public Adapter createUnzipAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.Checksum <em>Checksum</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.Checksum
   * @generated
   */
  public Adapter createChecksumAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.JsonTransform <em>Json Transform</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.JsonTransform
   * @generated
   */
  public Adapter createJsonTransformAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.JsonDeserialize <em>Json Deserialize</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.JsonDeserialize
   * @generated
   */
  public Adapter createJsonDeserializeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.RestApi <em>Rest Api</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.RestApi
   * @generated
   */
  public Adapter createRestApiAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.Python <em>Python</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.Python
   * @generated
   */
  public Adapter createPythonAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.Rest <em>Rest</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.Rest
   * @generated
   */
  public Adapter createRestAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.RestPart <em>Rest Part</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.RestPart
   * @generated
   */
  public Adapter createRestPartAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link in.handyman.dsl.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see in.handyman.dsl.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //DslAdapterFactory
